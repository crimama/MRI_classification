{"cells":[{"cell_type":"markdown","metadata":{"id":"I_iELta4J5NT"},"source":["# 디렉토리 설정 "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"25gmHRCYEzmf"},"outputs":[],"source":["!unzip /content/drive/MyDrive/DataSet/KYR_B_imaging.zip\n","!cp '/content/drive/MyDrive/Colab Notebooks/CT분류프로젝트/Custom_Py/init.py' ./"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"3T5U1_vVWqS8","executionInfo":{"status":"ok","timestamp":1645143007925,"user_tz":-540,"elapsed":15448,"user":{"displayName":"­임훈 | ERICA 재료화학공학과","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"}}},"outputs":[],"source":["!cp -r '/content/KYR_B_imaging/20201224 DL_MRI_SNSB_임승욱/swr3' '/content/KYR_B_imaging' \n","!cp -r '/content/KYR_B_imaging/20201224 DL_MRI_SNSB_임승욱/swr2 74' '/content/KYR_B_imaging' \n","!cp -r '/content/KYR_B_imaging/20201224 DL_MRI_SNSB_임승욱/swr5' '/content/KYR_B_imaging' \n","!cp -r '/content/KYR_B_imaging/20201224 DL_MRI_SNSB_임승욱/swr1' '/content/KYR_B_imaging' \n","!cp -r '/content/KYR_B_imaging/20201224 DL_MRI_SNSB_임승욱/swr7' '/content/KYR_B_imaging' \n","!cp -r '/content/KYR_B_imaging/20201224 DL_MRI_SNSB_임승욱/swr8' '/content/KYR_B_imaging' \n","!cp -r '/content/KYR_B_imaging/20201224 DL_MRI_SNSB_임승욱/swr4' '/content/KYR_B_imaging' \n","!cp -r '/content/KYR_B_imaging/20201224 DL_MRI_SNSB_임승욱/nswr1' '/content/KYR_B_imaging' \n","!cp -r '/content/KYR_B_imaging/20201224 DL_MRI_SNSB_임승욱/swr6' '/content/KYR_B_imaging' \n","!rm -r '/content/KYR_B_imaging/20201224 DL_MRI_SNSB_임승욱'"]},{"cell_type":"markdown","metadata":{"id":"zcZ1__VY3jdO"},"source":["# 초기작업"]},{"cell_type":"markdown","metadata":{"id":"4vWmiBmR0ege"},"source":["## 기본 DF 생성 "]},{"cell_type":"code","execution_count":3,"metadata":{"executionInfo":{"elapsed":435,"status":"ok","timestamp":1645143014763,"user":{"displayName":"­임훈 | ERICA 재료화학공학과","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"},"user_tz":-540},"id":"rosYzDen1l6T"},"outputs":[],"source":["import os \n","import cv2 \n","import pandas as pd \n","from glob import glob\n","from tqdm import tqdm\n","from init import init #초기 설정용 커스텀 패키지 \n","import numpy as np \n","import matplotlib.pyplot as plt \n","import matplotlib.pyplot as cm \n","import warnings\n","warnings.filterwarnings('ignore')"]},{"cell_type":"markdown","metadata":{"id":"DdMMgGvZ3iDe"},"source":["###snsb_df 생성 "]},{"cell_type":"code","execution_count":4,"metadata":{"executionInfo":{"elapsed":1690,"status":"ok","timestamp":1645143018499,"user":{"displayName":"­임훈 | ERICA 재료화학공학과","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"},"user_tz":-540},"id":"ZJy_JgMFUqUQ"},"outputs":[],"source":["columns = ['성명',\n"," '병록번호',\n"," '만나이',\n"," '검사일',\n"," '교육년수',\n"," 'SVLT_recall_total_score_z',\n"," 'SVLT_Delayed_recall_z',\n"," 'SVLT_recognition_score_z',\n"," 'RCFT_immediate_recall_z',\n"," 'RCFT_delayed_recall_z',\n"," 'RCFT_recognition_score_z',\n"," 'K_MMSE_total_score_z',\n"," 'SNSB_II_Domain_Attention_z',\n"," 'SNSB_II_Domain_Language_z',\n"," 'SNSB_II_Domain_Visuospatial_z',\n"," 'SNSB_II_Domain_Memory_z',\n"," 'SNSB_II_Domain_Frontal_z']\n","\n","snsb_df = pd.read_csv('/content/drive/MyDrive/DataSet/202202_김예림/SNSB_integerated.csv')\n","snsb_df = snsb_df.drop([2098,2591]) #병록번호 없는 행 제거 <- 결측치 \n","snsb_df['병록번호'] = snsb_df['병록번호'].apply(lambda x : str(int(x)))\n","\n","snsb_df = snsb_df[columns]"]},{"cell_type":"markdown","metadata":{"id":"V7h0NIEotoIc"},"source":["###dir_df 생성 "]},{"cell_type":"code","execution_count":6,"metadata":{"executionInfo":{"elapsed":922,"status":"ok","timestamp":1645143073914,"user":{"displayName":"­임훈 | ERICA 재료화학공학과","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"},"user_tz":-540},"id":"kerrOcyYidyv"},"outputs":[],"source":["#폴더 디렉토리\n","folder_dir = glob('/content/KYR_B_imaging/*')\n","dir_df = init.dir_df(folder_dir)\n","dir_df = dir_df.sort_values(by=['dir'])"]},{"cell_type":"markdown","metadata":{"id":"D2-wVYErkt2_"},"source":["### 병록번호- key 값 보정"]},{"cell_type":"code","execution_count":7,"metadata":{"executionInfo":{"elapsed":388,"status":"ok","timestamp":1645143075754,"user":{"displayName":"­임훈 | ERICA 재료화학공학과","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"},"user_tz":-540},"id":"IlQnCKnF06He"},"outputs":[],"source":["target_length = [4,5,6,7,8] #<- 수정해야 하는 병록번호 갯수들 \n","\n","dir_df,snsb_df = init.key_mismatch(dir_df,snsb_df,target_length)\n","# plt.hist(snsb_df['병록번호'].map(len))\n","# plt.show()\n","\n","#에러값들 제외 \n","errors = ['000758836-1' '030338456-1' '040145556-1' '050236926-1' '090374796-1'\n"," '100402746-1' '120010356-1' '870133669-1' '920033543-1' '930236559-1'\n"," '930257597-1' '970682600-1']\n","\n","dir_df = dir_df.drop(np.where(dir_df['key'].apply(lambda x : x in errors))[0])"]},{"cell_type":"markdown","metadata":{"id":"8s0QWgYB5fLR"},"source":["##이미지 장수 조절\n"]},{"cell_type":"markdown","metadata":{"id":"flyqxIBS-YmT"},"source":["### Key 별 이미지 갯수 리스트 생성 "]},{"cell_type":"markdown","metadata":{"id":"RQlnuMxJmPDx"},"source":["Key 별 이미지 장수 확인 "]},{"cell_type":"code","execution_count":10,"metadata":{"executionInfo":{"elapsed":4953,"status":"ok","timestamp":1645143138495,"user":{"displayName":"­임훈 | ERICA 재료화학공학과","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"},"user_tz":-540},"id":"Mv8bk7a9mRze"},"outputs":[],"source":["#이미지 장수 연산 \n","keys = list(set(dir_df['key'])) \n","images_length = pd.DataFrame(keys)[0].apply(lambda x: init.check_images(dir_df,x)) #키 값별로 이미지의 장수들 계산 \n","# images_length.value_counts()\n","\n","length_df = pd.DataFrame([keys,images_length]).T\n","length_df.columns = ['key','image_length']\n","length_df['image_length']  = length_df['image_length'].map(int)\n","\n","#Standard를 기준으로 less over 분할 \n","standard = 19 # 통일 시킬 이미지 장 수 기준 \n","\n","# 조정이 필요한 장 수 초과하는 것들만 추림 \n","length_df_over = length_df[length_df['image_length']>standard]\n","\n","#19장 보다 적은 경우 \n","# length_df_less = length_df[length_df['image_length']<standard]"]},{"cell_type":"markdown","metadata":{"id":"KiMO161I-boA"},"source":["### new_dir_df 생성 "]},{"cell_type":"code","execution_count":19,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":8263,"status":"ok","timestamp":1645143241532,"user":{"displayName":"­임훈 | ERICA 재료화학공학과","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"},"user_tz":-540},"id":"W0T5XeyUeyOm","outputId":"73b16b24-d1fd-4970-a4a1-eb0e948be5d9"},"outputs":[{"output_type":"stream","name":"stderr","text":["100%|██████████| 1606/1606 [00:07<00:00, 209.53it/s]\n"]}],"source":["new_dir_df = pd.DataFrame(np.zeros(1606*19*2).reshape(-1,2))\n","new_dir_df.columns = dir_df.columns\n","\n","for index in tqdm(range(1606)):\n","  new_dir_df.iloc[index*19:(index+1)*19,:]  = dir_df.loc[init.droped_indexes(dir_df,length_df_over,index,standard=standard)]\n","new_dir_df = new_dir_df.sort_values(by=['dir'])"]},{"cell_type":"markdown","metadata":{"id":"fggGNd-N0YfV"},"source":["## z score 임베딩 생성"]},{"cell_type":"code","execution_count":20,"metadata":{"executionInfo":{"elapsed":3,"status":"ok","timestamp":1645143246387,"user":{"displayName":"­임훈 | ERICA 재료화학공학과","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"},"user_tz":-540},"id":"aqe-IPZm0hvy"},"outputs":[],"source":["key_lists = np.unique(new_dir_df['key'])\n","key_lists.sort()\n","\n","Embedding_columns = snsb_df.columns[4:]\n","\n","for column in Embedding_columns:\n","  snsb_df[f'E_{column}'] = snsb_df[column].map(init.zscore_Embedding)\n","\n","#정렬 \n","snsb_df = snsb_df.sort_values(by=['병록번호'])\n","new_dir_df = new_dir_df.sort_values(by=['key'])\n","\n","csvs = snsb_df[snsb_df['병록번호'].apply(lambda x : x in key_lists)].sort_values(by=['병록번호'])\n","csvs = csvs.sort_values(by=['성명'])\n","csvs = csvs.drop_duplicates(['병록번호'], keep = 'first')\n","csvs = csvs.sort_values(['병록번호'])\n","new_dir_df = new_dir_df.sort_values(by=['key','dir'])"]},{"cell_type":"markdown","metadata":{"id":"W7ML5r7Z4i0U"},"source":["# 전처리"]},{"cell_type":"markdown","metadata":{"id":"ZaVmNxsN-JvR"},"source":["## 이미지 전처리"]},{"cell_type":"code","execution_count":21,"metadata":{"executionInfo":{"elapsed":414,"status":"ok","timestamp":1645143261631,"user":{"displayName":"­임훈 | ERICA 재료화학공학과","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"},"user_tz":-540},"id":"d-z0VSeyBA6b"},"outputs":[],"source":["def plot_img(temp_img):\n","  plt.figure(figsize=(10,10))\n","  plt.imshow(temp_img)\n","  plt.show()"]},{"cell_type":"code","execution_count":22,"metadata":{"executionInfo":{"elapsed":3,"status":"ok","timestamp":1645143265502,"user":{"displayName":"­임훈 | ERICA 재료화학공학과","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"},"user_tz":-540},"id":"thvDsi6n-GgV"},"outputs":[],"source":["#이미지 크롭 \n","def img_crop(img):\n","  shape = img.shape[0]\n","  croped_img = img[int(shape*0.05):int(shape*0.95),int(shape*0.1):int(shape*0.9),:]\n","  return croped_img \n","\n","#이미지 콘트라스트 변경 \n","def img_Contrast(img): \n","  lab = cv2.cvtColor(img, cv2.COLOR_BGR2LAB)\n","  l, a, b = cv2.split(lab)\n","  clahe = cv2.createCLAHE(clipLimit=3.0, tileGridSize=(8, 8)) \n","  cl = clahe.apply(l)\n","  limg = cv2.merge((cl, a, b))\n","  final = cv2.cvtColor(limg, cv2.COLOR_LAB2BGR)\n","  return final \n","\n","\n","#키값으로 이미지 dir 검색 \n","def temp_dir_df(new_dir_df,key):\n","  temp_df = new_dir_df[new_dir_df['key']==key]\n","  return temp_df\n","\n","#더미 넘파이에 한개씩 넣음 -> 19개 넣어서 19,512,512,3 shape 만듬 \n","def read_imgs(temp_df):\n","  temp_imgs = []\n","  for dir_index in range(19):\n","    temp_img = cv2.imread(temp_df['dir'].iloc[dir_index])\n","    temp_img = img_crop(temp_img)\n","    temp_img = img_Contrast(temp_img)\n","    temp_img = cv2.resize(temp_img,dsize= (128,128))\n","    temp_imgs.append(temp_img)\n","  temp_imgs = np.array(temp_imgs)\n","  return temp_imgs\n","  \n","# 위 두개 통합 \n","def make_temp_imgs(new_dir_df,key):\n","  temp_df = temp_dir_df(new_dir_df,key)\n","  temp_imgs = read_imgs(temp_df)\n","  return temp_imgs"]},{"cell_type":"markdown","metadata":{"id":"x4DZ7OS8nkyd"},"source":["# 데이터 제너레이터"]},{"cell_type":"markdown","metadata":{"id":"2fOR-6Hj5Cqd"},"source":["## 사전설정"]},{"cell_type":"code","execution_count":23,"metadata":{"executionInfo":{"elapsed":2,"status":"ok","timestamp":1645143271285,"user":{"displayName":"­임훈 | ERICA 재료화학공학과","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"},"user_tz":-540},"id":"WfdUHzsn8qQp"},"outputs":[],"source":["input_columns = ['만나이','교육년수']\n","output_columns = ['E_SVLT_recall_total_score_z', 'E_SVLT_Delayed_recall_z',\n","       'E_SVLT_recognition_score_z', 'E_RCFT_immediate_recall_z',\n","       'E_RCFT_delayed_recall_z', 'E_RCFT_recognition_score_z',\n","       'E_K_MMSE_total_score_z', 'E_SNSB_II_Domain_Attention_z',\n","       'E_SNSB_II_Domain_Language_z', 'E_SNSB_II_Domain_Visuospatial_z',\n","       'E_SNSB_II_Domain_Memory_z', 'E_SNSB_II_Domain_Frontal_z']\n","\n","csvs_max = np.array([90,18])\n","csvs_min = np.array([45,0])"]},{"cell_type":"code","execution_count":24,"metadata":{"executionInfo":{"elapsed":2283,"status":"ok","timestamp":1645143275968,"user":{"displayName":"­임훈 | ERICA 재료화학공학과","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"},"user_tz":-540},"id":"IBLIkbwxVo32"},"outputs":[],"source":["from tensorflow.keras.preprocessing import image\n","from tensorflow.keras.utils import Sequence\n","import math\n","\n","class DataGenerator(Sequence):\n","  def __init__(self,\n","                 key_lists,\n","                 new_dir_df,\n","                 csvs,\n","                 batch_size= 1,\n","                 validation_split = 0.1,\n","                 test_split = 0.1,\n","                 augmentation: bool = False,\n","                 shuffle: bool = False,\n","                 rescale:bool = True,\n","               indexes = None) -> None:\n","        self.key_lists = key_lists \n","        self.batch_size = batch_size\n","        self.shuffle = shuffle #기본 : False\n","        self.validation_split = validation_split\n","        self.augmentation = augmentation\n","        self.rescale =rescale\n","        self.new_dir_df = new_dir_df\n","        self.csvs = csvs\n","        self.indexes, self.valid_indexes, self.test_indexes = self._prepare_indexes(validation_split, test_split, indexes)\n","\n","\n","          # shuffle for first epoch\n","        if self.shuffle:\n","            self.shuffle_data()\n","\n","  def __len__(self):\n","    return math.ceil(len(self.key_lists) / self.batch_size)\n","  \n","  def __getitem__(self,index):\n","    indexes = self.indexes[index*self.batch_size:(index+1)*self.batch_size]\n","    return self._generate_data(indexes)\n","\n","  def on_epoch_end(self):\n","        self._shuffle_index()\n","  \n","  def _prepare_indexes(self, validation_split, test_split, indexes):\n","        if indexes is not None:\n","            return indexes, None, None\n","        \n","        data_count = len(self.key_lists)\n","        all_index = np.arange(data_count)\n","\n","        if validation_split+test_split==0.0:\n","            return all_index, None, None\n","            \n","        valid_i = int(len(all_index)*(1-validation_split-test_split))\n","        test_i = int(len(all_index)*(1-test_split))\n","\n","        return all_index[:valid_i], all_index[valid_i:test_i], all_index[test_i:]\n","\n","  def _shuffle_index(self):\n","      if self.shuffle == True:\n","          np.random.shuffle(self.indexes)\n","  \n","  def _generate_data(self, indexes): #indexes = [0:1]\n","     csvs_input = self.csvs[input_columns].iloc[indexes]\n","     csvs_output = self.csvs[output_columns].iloc[indexes]\n","\n","     image_batch = self.key_lists[indexes]\n","     imgs = []\n","     for key_index in range(len(image_batch)):\n","       key = image_batch[key_index]\n","       temp_df = new_dir_df[new_dir_df['key']==key]\n","       temp_imgs = read_imgs(temp_df)\n","       imgs.append(temp_imgs)\n","\n","     csvs_input = np.array(csvs_input)\n","     csvs_input = (csvs_input - csvs_min)/(csvs_max - csvs_min)\n","     csvs_output = np.array(csvs_output)\n","     imgs=  np.array(imgs)\n","     # return [imgs, csvs_input], csvs_output\n","     return imgs, csvs_output\n","\n","        \n","  def subset(self, type):\n","    if type==\"train\":\n","        return DataGenerator(self.key_lists,self.new_dir_df,self.csvs,indexes=self.indexes)\n","    elif type==\"validation\" or type==\"valid\":\n","        return DataGenerator(self.key_lists,self.new_dir_df,self.csvs, indexes=self.valid_indexes)\n","    elif type==\"test\":\n","        return DataGenerator(self.key_lists,self.new_dir_df,self.csvs, indexes=self.test_indexes)\n","    else:\n","        print(\"invalid type {}\".format(type))"]},{"cell_type":"code","execution_count":25,"metadata":{"executionInfo":{"elapsed":388,"status":"ok","timestamp":1645143280662,"user":{"displayName":"­임훈 | ERICA 재료화학공학과","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"},"user_tz":-540},"id":"4tugCZjyVt97"},"outputs":[],"source":["data_generator = DataGenerator(key_lists,new_dir_df,csvs,validation_split=0.2,test_split=0.1)\n","train_data_generator = data_generator.subset(\"train\")\n","valid_data_generator = data_generator.subset(\"valid\")\n","test_data_generator = data_generator.subset(\"test\")"]},{"cell_type":"code","source":["from tensorflow.keras.preprocessing import image\n","from tensorflow.keras.utils import Sequence\n","import math\n","\n","\n","class DataGenerator(Sequence):\n","  def __init__(self,\n","                 key_lists,\n","                 new_dir_df,\n","                 csvs,\n","                 batch_size: int,\n","                 augmentation: bool = False,\n","                 shuffle: bool = False,\n","                 rescale:bool = True) -> None:\n","        self.key_lists = key_lists\n","        self.input_columns = input_columns \n","        self.output_columns = output_columns\n","        self.batch_size = batch_size\n","        self.shuffle = shuffle\n","        self.augmentation = augmentation\n","        self.rescale =rescale\n","        self.new_dir_df = new_dir_df\n","        self.csvs = csvs\n","\n","  def __len__(self):\n","    return math.ceil(len(self.key_lists) / self.batch_size)\n","\n","\n","  def __getitem__(self, index):\n","    # csvs_input = self.csvs[self.input_columns].iloc[index*self.batch_size:(index+1):self.batch_size,:]\n","    csvs_output = self.csvs[self.output_columns].iloc[index*self.batch_size : (index+1)*self.batch_size,:]\n","\n","    image_batch = self.key_lists[index * self.batch_size:(index + 1) * self.batch_size]\n","    imgs = []\n","    for key_index in range(len(image_batch)):\n","      key = image_batch[key_index]\n","      temp_df = new_dir_df[new_dir_df['key']==key]\n","      temp_imgs = read_imgs(temp_df)\n","      imgs.append(temp_imgs)\n","\n","    # csvs_input = np.array(csvs_input)\n","    # csvs_input = (csvs_input - csvs_min)/(csvs_max - csvs_min)\n","    csvs_output = np.array(csvs_output)[:,:2]\n","    imgs=  np.array(imgs)\n","    # return [imgs, csvs_input], csvs_output\n","    return imgs, [np.array(csvs_output[:,0]),np.array(csvs_output[:,1])]\n","train = 200\n","valid = 300\n","train_generator = DataGenerator(key_lists[:train],new_dir_df[:train],csvs[:train],batch_size=4)\n","valid_generator = DataGenerator(key_lists[train:valid],new_dir_df[train:valid],csvs[train:valid],batch_size=4)\n","test_generator = DataGenerator(key_lists[valid:],new_dir_df[valid:],csvs[valid:],batch_size=1)"],"metadata":{"id":"H2W_q0UKNRwm","executionInfo":{"status":"ok","timestamp":1645144983124,"user_tz":-540,"elapsed":687,"user":{"displayName":"­임훈 | ERICA 재료화학공학과","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"}}},"execution_count":70,"outputs":[]},{"cell_type":"code","execution_count":67,"metadata":{"executionInfo":{"elapsed":343,"status":"ok","timestamp":1645144672155,"user":{"displayName":"­임훈 | ERICA 재료화학공학과","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"},"user_tz":-540},"id":"kACogFvjOEJS"},"outputs":[],"source":[""]},{"cell_type":"markdown","metadata":{"id":"5zG5rfQ9OaJn"},"source":["#모델"]},{"cell_type":"code","execution_count":71,"metadata":{"id":"Zw4xryIZObDe","executionInfo":{"status":"ok","timestamp":1645144992231,"user_tz":-540,"elapsed":359,"user":{"displayName":"­임훈 | ERICA 재료화학공학과","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"}}},"outputs":[],"source":["from tensorflow.keras import optimizers\n","import tensorflow as tfa \n","from tensorflow.keras import layers\n","from tensorflow.keras.layers import Bidirectional, LSTM, GRU\n","from tensorflow.keras.layers import BatchNormalization,Conv2D,MaxPooling2D,Activation,Dropout,Dense,Flatten,Input,Conv3D,MaxPooling3D\n","from tensorflow.keras.layers import Conv3D, ConvLSTM2D, BatchNormalization, Input, Dropout, Bidirectional\n","from tensorflow.keras import Model\n","from tensorflow.keras.layers import concatenate\n","from tensorflow.keras.applications import resnet50, efficientnet\n","from tensorflow.keras.applications import ResNet50, EfficientNetB0"]},{"cell_type":"code","source":[""],"metadata":{"id":"hArApdEvQCVK","executionInfo":{"status":"ok","timestamp":1645144468971,"user_tz":-540,"elapsed":321,"user":{"displayName":"­임훈 | ERICA 재료화학공학과","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"}}},"execution_count":55,"outputs":[]},{"cell_type":"code","execution_count":72,"metadata":{"id":"x7JIaUpJOedL","executionInfo":{"status":"ok","timestamp":1645144999986,"user_tz":-540,"elapsed":336,"user":{"displayName":"­임훈 | ERICA 재료화학공학과","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"}}},"outputs":[],"source":["from tensorflow.python import keras\n","def make_model():\n","  input = Input((19,128,128,3))\n","  x = BatchNormalization()(input)\n","  x = Conv3D(64,kernel_size=(3,3,3),padding='same',activation='relu')(x)\n","  x = MaxPooling3D((2,2,2))(x)\n","  x = BatchNormalization()(x)\n","\n","  x = Conv3D(64,kernel_size=(3,3,3),padding='same',activation='relu')(x)\n","  x = MaxPooling3D((2,2,2))(x)\n","  x = BatchNormalization()(x)\n","  \n","  x = Conv3D(128,kernel_size=(3,3,3),padding='same',activation='relu')(x)\n","  x = MaxPooling3D((2,2,2))(x)\n","  x = BatchNormalization()(x)\n","\n","  x = Conv3D(256,kernel_size=(3,3,3),padding='same',activation='relu')(x)\n","  x = MaxPooling3D((2,2,2))(x)\n","  x = BatchNormalization()(x)\n","\n","  x = Dense(units=512, activation=\"relu\")(x)\n","  x = Dropout(0.3)(x)\n","  x = Flatten()(x)\n","\n","\n","  output_1 = Dense(256,activation = 'relu')(x)\n","  output_1 = BatchNormalization()(output_1)\n","  output_1 = Dense(128,activation = 'relu')(output_1)\n","  output_1 = BatchNormalization()(output_1)\n","  output_1 = Dense(64,activation = 'relu')(output_1)\n","  output_1 = BatchNormalization()(output_1)\n","  output_1 = Dense(32,activation = 'relu')(output_1)\n","  output_1 = BatchNormalization()(output_1)\n","  output_1 = Dense(2, activation = 'softmax')(output_1)\n","\n","  output_2 = Dense(256,activation = 'relu')(x)\n","  output_2 = BatchNormalization()(output_2)\n","  output_2 = Dense(128,activation = 'relu')(output_2)\n","  output_2 = BatchNormalization()(output_2)\n","  output_2 = Dense(64,activation = 'relu')(x)\n","  output_2 = BatchNormalization()(output_2)\n","  output_2 = Dense(32,activation = 'relu')(output_2)\n","  output_2 = BatchNormalization()(output_2) \n","  output_2 = Dense(2, activation = 'softmax')(output_2)\n","\n","  # adam = optimizers.Adam(learning_rate = 0.0005)\n","  model = Model(input,[output_1,output_2])\n","  model.compile(optimizer='SGD',loss = 'sparse_categorical_crossentropy',metrics=['accuracy'])\n","  return model"]},{"cell_type":"code","execution_count":73,"metadata":{"id":"4vGjA_FdOk-N","colab":{"base_uri":"https://localhost:8080/","height":416},"executionInfo":{"status":"error","timestamp":1645145034743,"user_tz":-540,"elapsed":27178,"user":{"displayName":"­임훈 | ERICA 재료화학공학과","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"}},"outputId":"5159a009-1bf9-4757-d506-384aeedb203a"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/100\n","27/50 [===============>..............] - ETA: 12s - loss: 1.7403 - dense_49_loss: 0.9001 - dense_54_loss: 0.8402 - dense_49_accuracy: 0.4630 - dense_54_accuracy: 0.5278"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-73-617465c76711>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmake_model\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mhistory\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_generator\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mvalidation_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvalid_generator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepochs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mverbose\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcallbacks\u001b[0m\u001b[0;34m=\u001b[0m \u001b[0mcallbacks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     62\u001b[0m     \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     63\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 64\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     65\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# pylint: disable=broad-except\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     66\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_batch_size, validation_freq, max_queue_size, workers, use_multiprocessing)\u001b[0m\n\u001b[1;32m   1382\u001b[0m                 _r=1):\n\u001b[1;32m   1383\u001b[0m               \u001b[0mcallbacks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_train_batch_begin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1384\u001b[0;31m               \u001b[0mtmp_logs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1385\u001b[0m               \u001b[0;32mif\u001b[0m \u001b[0mdata_handler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshould_sync\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1386\u001b[0m                 \u001b[0mcontext\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masync_wait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/util/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    148\u001b[0m     \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    149\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 150\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    151\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    152\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    913\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    914\u001b[0m       \u001b[0;32mwith\u001b[0m \u001b[0mOptionalXlaContext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jit_compile\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 915\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    916\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    917\u001b[0m       \u001b[0mnew_tracing_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexperimental_get_tracing_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m_call\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    945\u001b[0m       \u001b[0;31m# In this case we have created variables on the first call, so we run the\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    946\u001b[0m       \u001b[0;31m# defunned version which is guaranteed to never create variables.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 947\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_stateless_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# pylint: disable=not-callable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    948\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_stateful_fn\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    949\u001b[0m       \u001b[0;31m# Release the lock early so that multiple threads can perform the call\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   2955\u001b[0m        filtered_flat_args) = self._maybe_define_function(args, kwargs)\n\u001b[1;32m   2956\u001b[0m     return graph_function._call_flat(\n\u001b[0;32m-> 2957\u001b[0;31m         filtered_flat_args, captured_inputs=graph_function.captured_inputs)  # pylint: disable=protected-access\n\u001b[0m\u001b[1;32m   2958\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2959\u001b[0m   \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m_call_flat\u001b[0;34m(self, args, captured_inputs, cancellation_manager)\u001b[0m\n\u001b[1;32m   1852\u001b[0m       \u001b[0;31m# No tape is watching; skip to running the function.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1853\u001b[0m       return self._build_call_outputs(self._inference_function.call(\n\u001b[0;32m-> 1854\u001b[0;31m           ctx, args, cancellation_manager=cancellation_manager))\n\u001b[0m\u001b[1;32m   1855\u001b[0m     forward_backward = self._select_forward_and_backward_functions(\n\u001b[1;32m   1856\u001b[0m         \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36mcall\u001b[0;34m(self, ctx, args, cancellation_manager)\u001b[0m\n\u001b[1;32m    502\u001b[0m               \u001b[0minputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    503\u001b[0m               \u001b[0mattrs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mattrs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 504\u001b[0;31m               ctx=ctx)\n\u001b[0m\u001b[1;32m    505\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    506\u001b[0m           outputs = execute.execute_with_cancellation(\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/execute.py\u001b[0m in \u001b[0;36mquick_execute\u001b[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001b[0m\n\u001b[1;32m     53\u001b[0m     \u001b[0mctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mensure_initialized\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     54\u001b[0m     tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n\u001b[0;32m---> 55\u001b[0;31m                                         inputs, attrs, num_outputs)\n\u001b[0m\u001b[1;32m     56\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_NotOkStatusException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     57\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mname\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 0 Axes>"]},"metadata":{}}],"source":["model = make_model()\n","history = model.fit(train_generator,validation_data = valid_generator, epochs=100,verbose=1,callbacks= callbacks)"]},{"cell_type":"code","source":["history = model.fit(train_generator,validation_data = valid_generator, epochs=100,verbose=1,callbacks= callbacks)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":649},"id":"D0rS17QVHi5P","executionInfo":{"status":"error","timestamp":1645008117274,"user_tz":-540,"elapsed":106229,"user":{"displayName":"­임훈 | ERICA 재료화학공학과","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"}},"outputId":"d2011040-cab3-4d7d-fb81-7df5322f1ce5"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["loss =  0.19801603257656097 , val_loss =  2.982713222503662\n","\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 46s 926ms/step - loss: 0.1980 - dense_60_loss: 0.1222 - dense_65_loss: 0.0758 - dense_60_accuracy: 0.9550 - dense_65_accuracy: 0.9950 - val_loss: 2.9827 - val_dense_60_loss: 1.4308 - val_dense_65_loss: 1.5519 - val_dense_60_accuracy: 0.5000 - val_dense_65_accuracy: 0.6000 - lr: 0.0100\n","Epoch 3/100\n","20/50 [===========>..................] - ETA: 18s - loss: 0.1403 - dense_60_loss: 0.0772 - dense_65_loss: 0.0632 - dense_60_accuracy: 0.9875 - dense_65_accuracy: 1.0000"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-36-5729ae78da78>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mhistory\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_generator\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mvalidation_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvalid_generator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepochs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mverbose\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcallbacks\u001b[0m\u001b[0;34m=\u001b[0m \u001b[0mcallbacks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     62\u001b[0m     \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     63\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 64\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     65\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# pylint: disable=broad-except\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     66\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_batch_size, validation_freq, max_queue_size, workers, use_multiprocessing)\u001b[0m\n\u001b[1;32m   1387\u001b[0m               \u001b[0mlogs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtmp_logs\u001b[0m  \u001b[0;31m# No error, now safe to assign to logs.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1388\u001b[0m               \u001b[0mend_step\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstep\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mdata_handler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstep_increment\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1389\u001b[0;31m               \u001b[0mcallbacks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_train_batch_end\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mend_step\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlogs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1390\u001b[0m               \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstop_training\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1391\u001b[0m                 \u001b[0;32mbreak\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/callbacks.py\u001b[0m in \u001b[0;36mon_train_batch_end\u001b[0;34m(self, batch, logs)\u001b[0m\n\u001b[1;32m    436\u001b[0m     \"\"\"\n\u001b[1;32m    437\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_should_call_train_batch_hooks\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 438\u001b[0;31m       \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_batch_hook\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mModeKeys\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTRAIN\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'end'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbatch\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlogs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlogs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    439\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    440\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0mon_test_batch_begin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbatch\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlogs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/callbacks.py\u001b[0m in \u001b[0;36m_call_batch_hook\u001b[0;34m(self, mode, hook, batch, logs)\u001b[0m\n\u001b[1;32m    295\u001b[0m       \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_batch_begin_hook\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbatch\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlogs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    296\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mhook\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'end'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 297\u001b[0;31m       \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_batch_end_hook\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbatch\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlogs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    298\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    299\u001b[0m       raise ValueError(\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/callbacks.py\u001b[0m in \u001b[0;36m_call_batch_end_hook\u001b[0;34m(self, mode, batch, logs)\u001b[0m\n\u001b[1;32m    316\u001b[0m       \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_batch_times\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbatch_time\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    317\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 318\u001b[0;31m     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_batch_hook_helper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhook_name\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbatch\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlogs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    319\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    320\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_batch_times\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_num_batches_for_timing_check\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/callbacks.py\u001b[0m in \u001b[0;36m_call_batch_hook_helper\u001b[0;34m(self, hook_name, batch, logs)\u001b[0m\n\u001b[1;32m    354\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mcallback\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcallbacks\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    355\u001b[0m       \u001b[0mhook\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcallback\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhook_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 356\u001b[0;31m       \u001b[0mhook\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbatch\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlogs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    357\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    358\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_check_timing\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/callbacks.py\u001b[0m in \u001b[0;36mon_train_batch_end\u001b[0;34m(self, batch, logs)\u001b[0m\n\u001b[1;32m   1032\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1033\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0mon_train_batch_end\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbatch\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlogs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1034\u001b[0;31m     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_batch_update_progbar\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbatch\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlogs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1035\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1036\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0mon_test_batch_end\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbatch\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlogs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/callbacks.py\u001b[0m in \u001b[0;36m_batch_update_progbar\u001b[0;34m(self, batch, logs)\u001b[0m\n\u001b[1;32m   1104\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mverbose\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1105\u001b[0m       \u001b[0;31m# Only block async when verbose = 1.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1106\u001b[0;31m       \u001b[0mlogs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtf_utils\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msync_to_numpy_or_python_type\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlogs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1107\u001b[0m       \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprogbar\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mseen\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlogs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfinalize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1108\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/utils/tf_utils.py\u001b[0m in \u001b[0;36msync_to_numpy_or_python_type\u001b[0;34m(tensors)\u001b[0m\n\u001b[1;32m    561\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitem\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mt\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mt\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    562\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 563\u001b[0;31m   \u001b[0;32mreturn\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnest\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmap_structure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_to_single_numpy_or_python_type\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtensors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    564\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    565\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/util/nest.py\u001b[0m in \u001b[0;36mmap_structure\u001b[0;34m(func, *structure, **kwargs)\u001b[0m\n\u001b[1;32m    912\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    913\u001b[0m   return pack_sequence_as(\n\u001b[0;32m--> 914\u001b[0;31m       \u001b[0mstructure\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mx\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mentries\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    915\u001b[0m       expand_composites=expand_composites)\n\u001b[1;32m    916\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/util/nest.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m    912\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    913\u001b[0m   return pack_sequence_as(\n\u001b[0;32m--> 914\u001b[0;31m       \u001b[0mstructure\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mx\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mentries\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    915\u001b[0m       expand_composites=expand_composites)\n\u001b[1;32m    916\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/utils/tf_utils.py\u001b[0m in \u001b[0;36m_to_single_numpy_or_python_type\u001b[0;34m(t)\u001b[0m\n\u001b[1;32m    555\u001b[0m     \u001b[0;31m# Don't turn ragged or sparse tensors to NumPy.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    556\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTensor\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 557\u001b[0;31m       \u001b[0mt\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnumpy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    558\u001b[0m     \u001b[0;31m# Strings, ragged and sparse tensors don't have .item(). Return them as-is.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    559\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndarray\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgeneric\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/framework/ops.py\u001b[0m in \u001b[0;36mnumpy\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1221\u001b[0m     \"\"\"\n\u001b[1;32m   1222\u001b[0m     \u001b[0;31m# TODO(slebedev): Consider avoiding a copy for non-CPU or remote tensors.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1223\u001b[0;31m     \u001b[0mmaybe_arr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_numpy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# pylint: disable=protected-access\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1224\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mmaybe_arr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmaybe_arr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndarray\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mmaybe_arr\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1225\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/framework/ops.py\u001b[0m in \u001b[0;36m_numpy\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1187\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0m_numpy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1188\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1189\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_numpy_internal\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1190\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_NotOkStatusException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# pylint: disable=protected-access\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1191\u001b[0m       \u001b[0;32mraise\u001b[0m \u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_status_to_exception\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m  \u001b[0;31m# pylint: disable=protected-access\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"code","source":["# copy from https://gist.github.com/stared/dfb4dfaf6d9a8501cd1cc8b8cb806d2e\n","# loss 실시간 출력 \n","from IPython.display import clear_output\n","from tensorflow.keras.callbacks import Callback\n","\n","class PlotLosses(Callback):\n","\n","  def on_train_begin(self, logs={}):\n","    self.epochs = []\n","    self.losses = []\n","    self.val_losses = []\n","    self.logs = []\n","    self.fig = plt.figure()\n","\n","\n","  def on_epoch_end(self, epoch, logs={}):\n","\n","    self.epochs.append(epoch)\n","    self.losses.append(logs.get('loss'))\n","    self.val_losses.append(logs.get('val_loss'))\n","\n","    clear_output(wait=True)\n","    plt.plot(self.epochs, self.losses, label=\"loss\")\n","    plt.plot(self.epochs, self.val_losses, label=\"val_loss\")\n","    plt.legend()\n","    plt.show();\n","    print(\"loss = \", self.losses[-1], \", val_loss = \", self.val_losses[-1])\n","\n","#call backs 선언\n","plot_losses = PlotLosses()\n","\n","from tensorflow.keras.callbacks import ModelCheckpoint #<- model 저장 객체, best_model.h5라는 모델 이 저장 됨 \n","model_check_point = ModelCheckpoint(\n","    'best_model.h5', \n","    monitor='val_loss', \n","    verbose=1, \n","    save_best_only=True)\n","\n","\n","from tensorflow.keras.callbacks import EarlyStopping\n","early_stopping = EarlyStopping(\n","    monitor='val_loss',  # 모니터링 대상, 이걸 기준으로 멈춤 \n","    verbose=1,\n","    patience=50)         # 중지까지의 여유분\n","\n","from tensorflow.keras.callbacks import ReduceLROnPlateau\n","reduce_lr = ReduceLROnPlateau(\n","    monitor='val_loss', # 모니터링 대상\n","    patience=25,        # 대상ㅃ 기간동안 유지\n","    factor=0.2,         # 줄이는 양                              \n","    min_learning_rate=0.00001)     # 최소 학습율\n","\n","callbacks = [model_check_point, plot_losses, reduce_lr]"],"metadata":{"id":"iUi69BrvPvTu","executionInfo":{"status":"ok","timestamp":1645144597346,"user_tz":-540,"elapsed":324,"user":{"displayName":"­임훈 | ERICA 재료화학공학과","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"}}},"execution_count":63,"outputs":[]},{"cell_type":"code","source":["np.array(b).shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YrKmVZ3ErIyF","executionInfo":{"status":"ok","timestamp":1645001046397,"user_tz":-540,"elapsed":343,"user":{"displayName":"­임훈 | ERICA 재료화학공학과","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"}},"outputId":"42601bf9-2679-4991-c1c4-72f59e7af79e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(2, 1)"]},"metadata":{},"execution_count":239}]}],"metadata":{"accelerator":"GPU","colab":{"background_execution":"on","collapsed_sections":[],"machine_shape":"hm","name":"현재진행중","provenance":[{"file_id":"18tastMh4sxkdMSRQ3ShsNVmFNnRdzc2e","timestamp":1644885200151}],"mount_file_id":"1pZwwDcy03Jj_dM6dOU7Gi59mctIiJPVo","authorship_tag":"ABX9TyNxiOrMo8O4kWKW0oKBqIIM"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}