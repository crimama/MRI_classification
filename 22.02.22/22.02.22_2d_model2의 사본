{"cells":[{"cell_type":"markdown","metadata":{"id":"ydBBC3ycvL3M"},"source":["# 디렉토리 설정 "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"25gmHRCYEzmf"},"outputs":[],"source":["!unzip /content/drive/MyDrive/DataSet/KYR_B_imaging.zip\n","!cp '/content/drive/MyDrive/Colab Notebooks/CT분류프로젝트/Custom_Py/init.py' ./"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3T5U1_vVWqS8"},"outputs":[],"source":["!cp -r '/content/KYR_B_imaging/20201224 DL_MRI_SNSB_임승욱/swr3' '/content/KYR_B_imaging' \n","!cp -r '/content/KYR_B_imaging/20201224 DL_MRI_SNSB_임승욱/swr2 74' '/content/KYR_B_imaging' \n","!cp -r '/content/KYR_B_imaging/20201224 DL_MRI_SNSB_임승욱/swr5' '/content/KYR_B_imaging' \n","!cp -r '/content/KYR_B_imaging/20201224 DL_MRI_SNSB_임승욱/swr1' '/content/KYR_B_imaging' \n","!cp -r '/content/KYR_B_imaging/20201224 DL_MRI_SNSB_임승욱/swr7' '/content/KYR_B_imaging' \n","!cp -r '/content/KYR_B_imaging/20201224 DL_MRI_SNSB_임승욱/swr8' '/content/KYR_B_imaging' \n","!cp -r '/content/KYR_B_imaging/20201224 DL_MRI_SNSB_임승욱/swr4' '/content/KYR_B_imaging' \n","!cp -r '/content/KYR_B_imaging/20201224 DL_MRI_SNSB_임승욱/nswr1' '/content/KYR_B_imaging' \n","!cp -r '/content/KYR_B_imaging/20201224 DL_MRI_SNSB_임승욱/swr6' '/content/KYR_B_imaging' \n","!rm -r '/content/KYR_B_imaging/20201224 DL_MRI_SNSB_임승욱'"]},{"cell_type":"markdown","metadata":{"id":"zcZ1__VY3jdO"},"source":["# 초기작업"]},{"cell_type":"markdown","metadata":{"id":"4vWmiBmR0ege"},"source":["## 기본 DF 생성 "]},{"cell_type":"code","execution_count":1,"metadata":{"executionInfo":{"elapsed":280,"status":"ok","timestamp":1645503434193,"user":{"displayName":"­임훈","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"},"user_tz":-540},"id":"rosYzDen1l6T"},"outputs":[],"source":["import os \n","import cv2 \n","import pandas as pd \n","from glob import glob\n","from tqdm import tqdm\n","from init import init #초기 설정용 커스텀 패키지 \n","import numpy as np \n","import matplotlib.pyplot as plt \n","import matplotlib.pyplot as cm \n","import warnings\n","warnings.filterwarnings('ignore')"]},{"cell_type":"markdown","metadata":{"id":"DdMMgGvZ3iDe"},"source":["###snsb_df 생성 "]},{"cell_type":"code","execution_count":2,"metadata":{"executionInfo":{"elapsed":475,"status":"ok","timestamp":1645503436291,"user":{"displayName":"­임훈","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"},"user_tz":-540},"id":"ZJy_JgMFUqUQ"},"outputs":[],"source":["columns = ['성명',\n"," '병록번호',\n"," '만나이',\n"," '검사일',\n"," '교육년수',\n"," 'SVLT_recall_total_score_z',\n"," 'SVLT_Delayed_recall_z',\n"," 'SVLT_recognition_score_z',\n"," 'RCFT_immediate_recall_z',\n"," 'RCFT_delayed_recall_z',\n"," 'RCFT_recognition_score_z',\n"," 'K_MMSE_total_score_z',\n"," 'SNSB_II_Domain_Attention_z',\n"," 'SNSB_II_Domain_Language_z',\n"," 'SNSB_II_Domain_Visuospatial_z',\n"," 'SNSB_II_Domain_Memory_z',\n"," 'SNSB_II_Domain_Frontal_z']\n","\n","snsb_df = pd.read_csv('/content/drive/MyDrive/DataSet/202202_김예림/SNSB_integerated.csv')\n","snsb_df = snsb_df.drop([2098,2591]) #병록번호 없는 행 제거 <- 결측치 \n","snsb_df['병록번호'] = snsb_df['병록번호'].apply(lambda x : str(int(x))) #소수점으로 되어 있는 것 처리하고 str형 변형 \n","\n","snsb_df = snsb_df[columns]"]},{"cell_type":"markdown","metadata":{"id":"V7h0NIEotoIc"},"source":["###dir_df 생성 "]},{"cell_type":"code","execution_count":3,"metadata":{"executionInfo":{"elapsed":888,"status":"ok","timestamp":1645503438347,"user":{"displayName":"­임훈","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"},"user_tz":-540},"id":"kerrOcyYidyv"},"outputs":[],"source":["#폴더 디렉토리\n","folder_dir = glob('/content/KYR_B_imaging/*')\n","dir_df = init.dir_df(folder_dir)\n","dir_df = dir_df.sort_values(by=['key','dir'])\n","dir_df = dir_df.reset_index().drop(columns = 'index')"]},{"cell_type":"markdown","metadata":{"id":"D2-wVYErkt2_"},"source":["### 병록번호- key 값 보정\n","- 자리수 다 다른거, 중복인거 보정 \n","- 9자리로 통일 "]},{"cell_type":"code","execution_count":4,"metadata":{"executionInfo":{"elapsed":2,"status":"ok","timestamp":1645503438348,"user":{"displayName":"­임훈","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"},"user_tz":-540},"id":"IlQnCKnF06He"},"outputs":[],"source":["target_length = [4,5,6,7,8] #<- 수정해야 하는 병록번호 갯수들 \n","\n","dir_df,snsb_df = init.key_mismatch(dir_df,snsb_df,target_length)\n","#인덱스 초기화 \n","dir_df = dir_df.reset_index().drop(columns = 'index')\n","# plt.hist(snsb_df['병록번호'].map(len))\n","# plt.show()\n","\n","#에러값들 제외 \n","errors = ['000758836-1' '030338456-1' '040145556-1' '050236926-1' '090374796-1'\n"," '100402746-1' '120010356-1' '870133669-1' '920033543-1' '930236559-1'\n"," '930257597-1' '970682600-1']\n","\n","dir_df = dir_df.drop(np.where(dir_df['key'].map(len)>9)[0])"]},{"cell_type":"markdown","metadata":{"id":"8s0QWgYB5fLR"},"source":["## new_dir_df 생성 - 이미지 장수 통일 \n"]},{"cell_type":"markdown","metadata":{"id":"b0iCEN_oc40h"},"source":["### key 값 별 이미지 장수 연산 "]},{"cell_type":"code","execution_count":5,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4651,"status":"ok","timestamp":1645503443439,"user":{"displayName":"­임훈","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"},"user_tz":-540},"id":"tJ0qOVhtjdjK","outputId":"e4a7ffb5-6de5-46ac-bfc3-4fe258884699"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["1606"]},"metadata":{},"execution_count":5}],"source":["#이미지 장수 연산 \n","keys = list(set(dir_df['key'])) \n","images_length = pd.DataFrame(keys)[0].apply(lambda x: init.check_images(dir_df,x)) #키 값별로 이미지의 장수들 계산 \n","# images_length.value_counts()\n","\n","length_df = pd.DataFrame([keys,images_length]).T\n","length_df.columns = ['key','image_length']\n","length_df['image_length']  = length_df['image_length'].map(int)\n","\n","#Standard를 기준으로 less over 분할 \n","standard = 19 # 통일 시킬 이미지 장 수 기준 \n","\n","# 조정이 필요한 장 수 초과하는 것들만 추림 \n","length_df_over = length_df[length_df['image_length']>standard]\n","\n","#19장 보다 적은 경우 \n","# length_df_less = length_df[length_df['image_length']<standard]\n","\n","len(length_df_over)"]},{"cell_type":"markdown","metadata":{"id":"KiMO161I-boA"},"source":["### key값 별로 이미지 19장 있는 new_dir_df 생성 "]},{"cell_type":"code","execution_count":6,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":7560,"status":"ok","timestamp":1645503450994,"user":{"displayName":"­임훈","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"},"user_tz":-540},"id":"W0T5XeyUeyOm","outputId":"4b00ec01-1365-4749-d01c-9196176d0c57"},"outputs":[{"output_type":"stream","name":"stderr","text":["100%|██████████| 1606/1606 [00:07<00:00, 211.32it/s]\n"]}],"source":["new_dir_df = pd.DataFrame(np.zeros(len(length_df_over)*19*2).reshape(-1,2))\n","new_dir_df.columns = dir_df.columns\n","\n","for index in tqdm(range(len(length_df_over))):\n","  new_dir_df.iloc[index*19:(index+1)*19,:]  = dir_df.loc[init.droped_indexes(dir_df,length_df_over,index,standard=19)]\n","new_dir_df = new_dir_df.sort_values(by=['key','dir'])\n","new_dir_df = new_dir_df.reset_index().drop(columns = 'index')"]},{"cell_type":"markdown","metadata":{"id":"fggGNd-N0YfV"},"source":["## csvs 생성 - z 스코어 임베딩 + 중복제거 \n","\n"]},{"cell_type":"code","execution_count":7,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":454,"status":"ok","timestamp":1645503451439,"user":{"displayName":"­임훈","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"},"user_tz":-540},"id":"aqe-IPZm0hvy","outputId":"295d2029-ecb1-4413-fbc2-1b5829f741fb"},"outputs":[{"output_type":"stream","name":"stdout","text":["1606 1606\n"]}],"source":["#19장의 사진으로 추린 new_dir_df로 새로운 키 리스트만듬) \n","\n","key_lists = np.unique(new_dir_df['key'])\n","key_lists.sort()\n","\n","Embedding_columns = snsb_df.columns[5:]\n","\n","for column in Embedding_columns:\n","  snsb_df[f'E_{column}'] = snsb_df[column].map(init.zscore_Embedding)\n","\n","#정렬 \n","snsb_df = snsb_df.sort_values(by=['병록번호'])\n","new_dir_df = new_dir_df.sort_values(by=['key','dir'])\n","\n","#snsb_df 중 key_lists에 있는 행들만 추림 -> csvs \n","csvs = snsb_df[snsb_df['병록번호'].apply(lambda x : x in key_lists)].sort_values(by=['병록번호'])\n","csvs = csvs.reset_index().drop(columns = 'index')\n","\n","#중복 제거 : 이름으로 정렬 후 중복 제거 \n","csvs = csvs.sort_values(by=['성명'])\n","csvs = csvs.drop_duplicates(['병록번호'], keep = 'first')\n","\n","#다시 병록번호 로 정렬 해서 csvs 와 new_dir_df 순을 맞춤 \n","csvs = csvs.sort_values(['병록번호'])\n","csvs = csvs.reset_index().drop(columns = 'index')\n","new_dir_df = new_dir_df.sort_values(by=['key','dir'])\n","new_dir_df = new_dir_df.reset_index().drop(columns = 'index')\n","\n","#맞춤 확인 \n","print(len(csvs),len(np.unique(new_dir_df['key'])))"]},{"cell_type":"code","source":["cc = ['E_SVLT_recall_total_score_z',\n","       'E_SVLT_Delayed_recall_z', 'E_SVLT_recognition_score_z',\n","       'E_RCFT_immediate_recall_z', 'E_RCFT_delayed_recall_z',\n","       'E_RCFT_recognition_score_z', 'E_K_MMSE_total_score_z',\n","       'E_SNSB_II_Domain_Attention_z', 'E_SNSB_II_Domain_Language_z',\n","       'E_SNSB_II_Domain_Visuospatial_z', 'E_SNSB_II_Domain_Memory_z',\n","       'E_SNSB_II_Domain_Frontal_z']\n","\n","plt.hist(snsb_df[cc[0]])\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":265},"id":"kgMnNg1spJ1o","executionInfo":{"status":"ok","timestamp":1645503557419,"user_tz":-540,"elapsed":3,"user":{"displayName":"­임훈","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"}},"outputId":"1c13adb8-7107-4d17-b9eb-eddddf09de61"},"execution_count":29,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"W7ML5r7Z4i0U"},"source":["# 전처리"]},{"cell_type":"markdown","metadata":{"id":"EX-1jaFPVI4F"},"source":["## new_dir_df 증강 "]},{"cell_type":"code","execution_count":31,"metadata":{"executionInfo":{"elapsed":434,"status":"ok","timestamp":1645503782276,"user":{"displayName":"­임훈","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"},"user_tz":-540},"id":"lNtzO8yETCF0"},"outputs":[],"source":["new_dir_df['dir_1'] = 0\n","new_dir_df['dir_2'] = 0 \n","new_dir_df['dir_1'].iloc[:-1] = new_dir_df['dir'].iloc[1:]\n","new_dir_df['dir_2'].iloc[:-2] = new_dir_df['dir'].iloc[2:]"]},{"cell_type":"code","execution_count":32,"metadata":{"executionInfo":{"elapsed":3481,"status":"ok","timestamp":1645503804769,"user":{"displayName":"­임훈","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"},"user_tz":-540},"id":"k6xdTC1cQNcy"},"outputs":[],"source":["i = 0 \n","drop_indexes = [] \n","for i in range(len(key_lists)):\n","  drop_index = new_dir_df[new_dir_df['key']==key_lists[i]].iloc[17:20,].index\n","  drop_indexes.append(drop_index)\n","drop_indexes = np.array(drop_indexes).reshape(-1,)\n","new_dir_df.drop(drop_indexes,inplace=True)\n","new_dir_df = new_dir_df.reset_index().drop(columns = 'index')"]},{"cell_type":"markdown","metadata":{"id":"2I0_BW-5YyZh"},"source":["## csvs 증강 "]},{"cell_type":"code","execution_count":33,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":281,"status":"ok","timestamp":1645503851165,"user":{"displayName":"­임훈","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"},"user_tz":-540},"id":"86aUi3ehlbSj","outputId":"5087727b-9953-4d5a-9873-1bad5cbd3b44"},"outputs":[{"output_type":"stream","name":"stderr","text":["100%|██████████| 16/16 [00:00<00:00, 250.36it/s]\n"]}],"source":["temp_csvs = np.array(csvs)\n","for i in tqdm(range(16)):\n","  temp_csvs = np.vstack([temp_csvs,np.array(csvs)])\n","temp_csvs = pd.DataFrame(temp_csvs)\n","temp_csvs.columns = csvs.columns\n","csvs = temp_csvs.sort_values(by=['병록번호']).reset_index().drop(columns = 'index')"]},{"cell_type":"code","source":["csvs"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":886},"id":"LtJJbuVZrDNK","executionInfo":{"status":"ok","timestamp":1645503855254,"user_tz":-540,"elapsed":310,"user":{"displayName":"­임훈","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"}},"outputId":"cedface4-9926-4622-cdb8-c40314c3060a"},"execution_count":34,"outputs":[{"output_type":"execute_result","data":{"text/html":["\n","  <div id=\"df-0ed70008-a5b2-439e-aa7b-7cf195869981\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>성명</th>\n","      <th>병록번호</th>\n","      <th>만나이</th>\n","      <th>검사일</th>\n","      <th>교육년수</th>\n","      <th>SVLT_recall_total_score_z</th>\n","      <th>SVLT_Delayed_recall_z</th>\n","      <th>SVLT_recognition_score_z</th>\n","      <th>RCFT_immediate_recall_z</th>\n","      <th>RCFT_delayed_recall_z</th>\n","      <th>RCFT_recognition_score_z</th>\n","      <th>K_MMSE_total_score_z</th>\n","      <th>SNSB_II_Domain_Attention_z</th>\n","      <th>SNSB_II_Domain_Language_z</th>\n","      <th>SNSB_II_Domain_Visuospatial_z</th>\n","      <th>SNSB_II_Domain_Memory_z</th>\n","      <th>SNSB_II_Domain_Frontal_z</th>\n","      <th>E_SVLT_recall_total_score_z</th>\n","      <th>E_SVLT_Delayed_recall_z</th>\n","      <th>E_SVLT_recognition_score_z</th>\n","      <th>E_RCFT_immediate_recall_z</th>\n","      <th>E_RCFT_delayed_recall_z</th>\n","      <th>E_RCFT_recognition_score_z</th>\n","      <th>E_K_MMSE_total_score_z</th>\n","      <th>E_SNSB_II_Domain_Attention_z</th>\n","      <th>E_SNSB_II_Domain_Language_z</th>\n","      <th>E_SNSB_II_Domain_Visuospatial_z</th>\n","      <th>E_SNSB_II_Domain_Memory_z</th>\n","      <th>E_SNSB_II_Domain_Frontal_z</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>안복인</td>\n","      <td>000004737</td>\n","      <td>81</td>\n","      <td>2015-02-25</td>\n","      <td>0.5</td>\n","      <td>0.34</td>\n","      <td>-0.33</td>\n","      <td>-0.32</td>\n","      <td>0.48</td>\n","      <td>-0.21</td>\n","      <td>-1.15</td>\n","      <td>-1.55</td>\n","      <td>-0.79</td>\n","      <td>-1.0</td>\n","      <td>-1.66</td>\n","      <td>-0.35</td>\n","      <td>-2.04</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>안복인</td>\n","      <td>000004737</td>\n","      <td>81</td>\n","      <td>2015-02-25</td>\n","      <td>0.5</td>\n","      <td>0.34</td>\n","      <td>-0.33</td>\n","      <td>-0.32</td>\n","      <td>0.48</td>\n","      <td>-0.21</td>\n","      <td>-1.15</td>\n","      <td>-1.55</td>\n","      <td>-0.79</td>\n","      <td>-1.0</td>\n","      <td>-1.66</td>\n","      <td>-0.35</td>\n","      <td>-2.04</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>안복인</td>\n","      <td>000004737</td>\n","      <td>81</td>\n","      <td>2015-02-25</td>\n","      <td>0.5</td>\n","      <td>0.34</td>\n","      <td>-0.33</td>\n","      <td>-0.32</td>\n","      <td>0.48</td>\n","      <td>-0.21</td>\n","      <td>-1.15</td>\n","      <td>-1.55</td>\n","      <td>-0.79</td>\n","      <td>-1.0</td>\n","      <td>-1.66</td>\n","      <td>-0.35</td>\n","      <td>-2.04</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>안복인</td>\n","      <td>000004737</td>\n","      <td>81</td>\n","      <td>2015-02-25</td>\n","      <td>0.5</td>\n","      <td>0.34</td>\n","      <td>-0.33</td>\n","      <td>-0.32</td>\n","      <td>0.48</td>\n","      <td>-0.21</td>\n","      <td>-1.15</td>\n","      <td>-1.55</td>\n","      <td>-0.79</td>\n","      <td>-1.0</td>\n","      <td>-1.66</td>\n","      <td>-0.35</td>\n","      <td>-2.04</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>안복인</td>\n","      <td>000004737</td>\n","      <td>81</td>\n","      <td>2015-02-25</td>\n","      <td>0.5</td>\n","      <td>0.34</td>\n","      <td>-0.33</td>\n","      <td>-0.32</td>\n","      <td>0.48</td>\n","      <td>-0.21</td>\n","      <td>-1.15</td>\n","      <td>-1.55</td>\n","      <td>-0.79</td>\n","      <td>-1.0</td>\n","      <td>-1.66</td>\n","      <td>-0.35</td>\n","      <td>-2.04</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>27297</th>\n","      <td>김난자</td>\n","      <td>990914662</td>\n","      <td>84</td>\n","      <td>2018-06-11</td>\n","      <td>0.0</td>\n","      <td>0.14</td>\n","      <td>1.19</td>\n","      <td>0.63</td>\n","      <td>-0.83</td>\n","      <td>-0.61</td>\n","      <td>0.93</td>\n","      <td>1.27</td>\n","      <td>0.09</td>\n","      <td>0.88</td>\n","      <td>0.63</td>\n","      <td>0.5</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>27298</th>\n","      <td>김난자</td>\n","      <td>990914662</td>\n","      <td>84</td>\n","      <td>2018-06-11</td>\n","      <td>0.0</td>\n","      <td>0.14</td>\n","      <td>1.19</td>\n","      <td>0.63</td>\n","      <td>-0.83</td>\n","      <td>-0.61</td>\n","      <td>0.93</td>\n","      <td>1.27</td>\n","      <td>0.09</td>\n","      <td>0.88</td>\n","      <td>0.63</td>\n","      <td>0.5</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>27299</th>\n","      <td>김난자</td>\n","      <td>990914662</td>\n","      <td>84</td>\n","      <td>2018-06-11</td>\n","      <td>0.0</td>\n","      <td>0.14</td>\n","      <td>1.19</td>\n","      <td>0.63</td>\n","      <td>-0.83</td>\n","      <td>-0.61</td>\n","      <td>0.93</td>\n","      <td>1.27</td>\n","      <td>0.09</td>\n","      <td>0.88</td>\n","      <td>0.63</td>\n","      <td>0.5</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>27300</th>\n","      <td>김난자</td>\n","      <td>990914662</td>\n","      <td>84</td>\n","      <td>2018-06-11</td>\n","      <td>0.0</td>\n","      <td>0.14</td>\n","      <td>1.19</td>\n","      <td>0.63</td>\n","      <td>-0.83</td>\n","      <td>-0.61</td>\n","      <td>0.93</td>\n","      <td>1.27</td>\n","      <td>0.09</td>\n","      <td>0.88</td>\n","      <td>0.63</td>\n","      <td>0.5</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>27301</th>\n","      <td>김난자</td>\n","      <td>990914662</td>\n","      <td>84</td>\n","      <td>2018-06-11</td>\n","      <td>0.0</td>\n","      <td>0.14</td>\n","      <td>1.19</td>\n","      <td>0.63</td>\n","      <td>-0.83</td>\n","      <td>-0.61</td>\n","      <td>0.93</td>\n","      <td>1.27</td>\n","      <td>0.09</td>\n","      <td>0.88</td>\n","      <td>0.63</td>\n","      <td>0.5</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>27302 rows × 29 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0ed70008-a5b2-439e-aa7b-7cf195869981')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-0ed70008-a5b2-439e-aa7b-7cf195869981 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-0ed70008-a5b2-439e-aa7b-7cf195869981');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["        성명       병록번호  ... E_SNSB_II_Domain_Memory_z E_SNSB_II_Domain_Frontal_z\n","0      안복인  000004737  ...                         0                          1\n","1      안복인  000004737  ...                         0                          1\n","2      안복인  000004737  ...                         0                          1\n","3      안복인  000004737  ...                         0                          1\n","4      안복인  000004737  ...                         0                          1\n","...    ...        ...  ...                       ...                        ...\n","27297  김난자  990914662  ...                         0                          1\n","27298  김난자  990914662  ...                         0                          1\n","27299  김난자  990914662  ...                         0                          1\n","27300  김난자  990914662  ...                         0                          1\n","27301  김난자  990914662  ...                         0                          1\n","\n","[27302 rows x 29 columns]"]},"metadata":{},"execution_count":34}]},{"cell_type":"markdown","metadata":{"id":"FpQ6WGP4LF-I"},"source":["## Augmentation "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pbX4pUJcLJDY"},"outputs":[],"source":["#이미지 콘트라스트 변경 \n","def img_Contrast(img): \n","  import cv2 \n","  lab = cv2.cvtColor(img, cv2.COLOR_BGR2LAB)\n","  l, a, b = cv2.split(lab)\n","  clahe = cv2.createCLAHE(clipLimit=3.0, tileGridSize=(8, 8)) \n","  cl = clahe.apply(l)\n","  limg = cv2.merge((cl, a, b))\n","  final = cv2.cvtColor(limg, cv2.COLOR_LAB2BGR)\n","  return final \n","#가우시안 블러 \n","def gaussianblur(image):\n","  import cv2 \n","  import numpy as np \n","  blur = cv2.GaussianBlur(image, (5,5), np.random.randint(0,3,1))\n","  return blur\n","\n","#랜덤 어그먼테이션 \n","def random_aug(aug_image):\n","  import numpy as np \n","  import cv2 \n","  n = np.random.randint(0,4,1)\n","  if n == 0:\n","    aug_image = cv2.flip(aug_image,np.random.randint(0,2,1))\n","  if n == 1:\n","    # aug_image = img_Contrast(aug_image)\n","    return aug_image\n","  if n ==2:\n","    aug_image = gaussianblur(aug_image)\n","  return aug_image\n","  if n ==3:\n","    return aug_image "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zKC5TzWeXBKH"},"outputs":[],"source":[""]},{"cell_type":"markdown","metadata":{"id":"ZaVmNxsN-JvR"},"source":["## 이미지 전처리"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"d-z0VSeyBA6b"},"outputs":[],"source":["def plot_img(temp_img):\n","  plt.figure(figsize=(10,10))\n","  plt.imshow(temp_img)\n","  plt.show()"]},{"cell_type":"code","execution_count":312,"metadata":{"executionInfo":{"elapsed":2,"status":"ok","timestamp":1645493010114,"user":{"displayName":"­임훈","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"},"user_tz":-540},"id":"thvDsi6n-GgV"},"outputs":[],"source":["#이미지 전처리 \n","def img_preprocess(img):\n","  shape = img.shape[0]\n","  preprocessed_img = img[int(shape*0.05):int(shape*0.95),int(shape*0.1):int(shape*0.9),:] #crop \n","  preprocessed_img = cv2.cvtColor(preprocessed_img, cv2.COLOR_BGR2GRAY)\n","  preprocessed_img = cv2.resize(preprocessed_img,dsize=(224,224)) #resize Albu mentations -> vision 관련 augmentation document \n","  preprocessed_img = preprocessed_img/255.\n","  # preprocessed_img = efficientnet.preprocess_input(preprocessed_img) \n","  return preprocessed_img \n","\n","\n","#더미 넘파이 만든 후 거기다 224,224 grayscale 이미지 넣음\n","#디렉토리 df로 이미지 만듬 \n","def read_imgs(indexed_df):\n","    temp_img_1 = img_preprocess(cv2.imread(indexed_df['dir']))\n","    temp_img_2 = img_preprocess(cv2.imread(indexed_df['dir_1']))\n","    temp_img_3 = img_preprocess(cv2.imread(indexed_df['dir_2']))\n","    temp_imgs = np.stack([temp_img_1,temp_img_2,temp_img_3],axis=2)\n","    temp_imgs = random_aug(temp_imgs) #어그먼테이션 \n","    return temp_imgs\n","\n"]},{"cell_type":"markdown","metadata":{"id":"x4DZ7OS8nkyd"},"source":["# 데이터 제너레이터"]},{"cell_type":"markdown","metadata":{"id":"2fOR-6Hj5Cqd"},"source":["## 사전설정"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"WfdUHzsn8qQp"},"outputs":[],"source":["input_columns = ['만나이','교육년수']\n","output_columns = ['E_SVLT_recall_total_score_z', 'E_SVLT_Delayed_recall_z',\n","       'E_SVLT_recognition_score_z', 'E_RCFT_immediate_recall_z',\n","       'E_RCFT_delayed_recall_z', 'E_RCFT_recognition_score_z',\n","       'E_K_MMSE_total_score_z', 'E_SNSB_II_Domain_Attention_z',\n","       'E_SNSB_II_Domain_Language_z', 'E_SNSB_II_Domain_Visuospatial_z',\n","       'E_SNSB_II_Domain_Memory_z', 'E_SNSB_II_Domain_Frontal_z']\n","\n","csvs_max = np.array([90,18])\n","csvs_min = np.array([45,0])"]},{"cell_type":"code","execution_count":368,"metadata":{"executionInfo":{"elapsed":311,"status":"ok","timestamp":1645503056919,"user":{"displayName":"­임훈","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"},"user_tz":-540},"id":"H2W_q0UKNRwm"},"outputs":[],"source":["from tensorflow.keras.preprocessing import image\n","from tensorflow.keras.utils import Sequence\n","import math\n","\n","\n","class DataGenerator(Sequence):\n","  def __init__(self,\n","                 new_dir_df,\n","                 csvs,\n","                 batch_size: int,\n","                 augmentation: bool = False,\n","                 shuffle: bool = False,\n","                 rescale:bool = True) -> None:\n","        self.input_columns = input_columns \n","        self.output_columns = output_columns\n","        self.batch_size = batch_size\n","        self.shuffle = shuffle\n","        self.augmentation = augmentation\n","        self.rescale =rescale\n","        self.new_dir_df = new_dir_df\n","        self.csvs = csvs\n","\n","  def __len__(self):\n","    return math.ceil(len(self.new_dir_df) / self.batch_size)\n","    \n","  def on_epoch_end(self):\n","    self.indices = np.arange(len(self.new_dir_df))\n","    if self.shuffle == True:\n","      np.random.shuffle(self.indices)\n","      self.new_dir_df = self.new_dir_df.iloc[self.indices]\n","      self.csvs = self.csvs.iloc[self.indices]\n","\n","\n","\n","  def __getitem__(self, index):\n","    csvs_input = self.csvs[self.input_columns].iloc[index*self.batch_size:(index+1)*self.batch_size,:]\n","    csvs_output = self.csvs[self.output_columns].iloc[index*self.batch_size : (index+1)*self.batch_size,:]\n","    imgs_dir_df = self.new_dir_df[index*self.batch_size : (index+1)*self.batch_size]\n","\n","    imgs = []\n","    for i in range(len(imgs_dir_df)):\n","      indexed_df = imgs_dir_df.iloc[i,:]\n","      temp_imgs = read_imgs(indexed_df)\n","      imgs.append(temp_imgs)\n","    imgs = np.array(imgs)\n","\n","    csvs_input = np.array(csvs_input).astype(np.float)\n","    csvs_input = (csvs_input - csvs_min)/(csvs_max - csvs_min)\n","    csvs_output = np.array(csvs_output)\n","    imgs=  np.array(imgs).astype(np.float)\n","    \n","    # return [imgs, csvs_input], csvs_output\n","    # return [imgs,csvs_input], [np.array(csvs_output[:,0]),np.array(csvs_output[:,1]),np.array(csvs_output[:,2]),np.array(csvs_output[:,3]),\n","    #               np.array(csvs_output[:,4]),np.array(csvs_output[:,5]),np.array(csvs_output[:,6]),np.array(csvs_output[:,7]),\n","    #               np.array(csvs_output[:,8]),np.array(csvs_output[:,9]),np.array(csvs_output[:,10]),np.array(csvs_output[:,11])]\n","    \n","    return [imgs,csvs_input], np.array(csvs_output[:,0])\n","\n","# train = 964*17\n","# valid = 1285*17\n","train = 50*17\n","valid = 60*17\n","train_generator = DataGenerator(new_dir_df[:train],csvs[:train],batch_size=8,shuffle=True)\n","valid_generator = DataGenerator(new_dir_df[train:valid],csvs[train:valid],batch_size=8,shuffle=False)\n","test_generator = DataGenerator(new_dir_df[valid:],csvs[valid:],batch_size=8)"]},{"cell_type":"markdown","metadata":{"id":"SwYYl4mdFEO4"},"source":["1. 모델 구조 \n","2. 스케일링 \n","3. 아웃풋 \n","4. 어그먼테이션 \n","5. "]},{"cell_type":"markdown","metadata":{"id":"5MlWvHz75Mma"},"source":["train : 964*17\n","\n","valid : [964~1285]*17\n","\n","test : [1285~1606]*17 \n","\n","약 60:20:20"]},{"cell_type":"markdown","metadata":{"id":"5zG5rfQ9OaJn"},"source":["#모델"]},{"cell_type":"markdown","source":["## 모델1"],"metadata":{"id":"Dymmc6MBl7xI"}},{"cell_type":"code","execution_count":342,"metadata":{"executionInfo":{"elapsed":284,"status":"ok","timestamp":1645500962505,"user":{"displayName":"­임훈","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"},"user_tz":-540},"id":"Zw4xryIZObDe"},"outputs":[],"source":["from tensorflow.keras import optimizers\n","import tensorflow as tf\n","from tensorflow.keras.optimizers import Adam\n","from tensorflow.keras import layers\n","from tensorflow.keras.layers import Bidirectional, LSTM, GRU, Activation\n","from tensorflow.keras.layers import BatchNormalization,Conv2D,MaxPooling2D,Activation,Dropout,Dense,Flatten,Input,Conv3D,MaxPooling3D\n","from tensorflow.keras.layers import Conv3D, ConvLSTM2D, BatchNormalization, Input, Dropout, Bidirectional\n","from tensorflow.keras import Model\n","from tensorflow.keras.layers import concatenate\n","from tensorflow.keras.applications import resnet50, efficientnet, VGG19\n","from tensorflow.keras.applications import ResNet50, EfficientNetB0, DenseNet169, MobileNet, vgg19"]},{"cell_type":"code","execution_count":319,"metadata":{"executionInfo":{"elapsed":1467,"status":"ok","timestamp":1645495963291,"user":{"displayName":"­임훈","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"},"user_tz":-540},"id":"vSNz8LLxSBPP"},"outputs":[],"source":["def output(x):\n","  output_2 = Dense(32,activation = 'relu')(x)\n","  output_2 = BatchNormalization()(output_2)\n","  output_2 = Dense(16,activation = 'relu')(output_2)\n","  output_2 = BatchNormalization()(output_2) \n","  output_2 = Dense(12, activation = 'softmax')(output_2)\n","  return output_2\n","\n","conv_layers = ResNet50(weights='imagenet', include_top=False, input_shape=(224, 224,3)) #size -> 256, 256 \n","conv_layers.trainable = False"]},{"cell_type":"code","execution_count":353,"metadata":{"executionInfo":{"elapsed":597,"status":"ok","timestamp":1645502506518,"user":{"displayName":"­임훈","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"},"user_tz":-540},"id":"x7JIaUpJOedL"},"outputs":[],"source":["from tensorflow.python import keras\n","def make_model():\n","  image_input = Input((224,224,3))\n","  image = conv_layers(image_input) \n","  image = Dense(32,activation = 'relu')(image)\n","  image = Dropout(0.2)(image)\n","  image = Flatten()(image)\n","  image_output = Dense(10, activation = 'relu')(image)\n","\n","\n","  csvs_input = Input((2))\n","  csvs = Dense(4, activation = 'relu')(csvs_input)\n","  cssv = Dropout(0.2)(csvs)\n","  csvs = BatchNormalization()(csvs)\n","  csvs = Dense(8,activation = 'relu')(csvs)\n","  csvs = Dropout(0.2)(csvs)\n","  csvs_output = Dense(10, activation = 'relu')(csvs)\n","\n","  combined = concatenate([image_output,csvs_output])\n","  x = Dense(10, activation = 'relu')(combined)\n","\n","  out = output(x)\n","  \n","  \n"," #output이 너무 많다 \n","\n","  model = Model([image_input,csvs_input],out)\n","  model.compile(optimizer='adam',loss = 'categorical_crossentropy',metrics=['accuracy'])\n","  return model\n","model = make_model()"]},{"cell_type":"markdown","source":["## 모델2"],"metadata":{"id":"Zaodqzrul9GC"}},{"cell_type":"code","execution_count":344,"metadata":{"executionInfo":{"elapsed":3380,"status":"ok","timestamp":1645501014215,"user":{"displayName":"­임훈","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"},"user_tz":-540},"id":"kqcc-_c8O3mV"},"outputs":[],"source":["def output(x):\n","  output_2 = Dense(16,activation = 'relu')(x)\n","  output_2 = BatchNormalization()(output_2)\n","  output_2 = Dense(8,activation = 'relu')(output_2)\n","  output_2 = BatchNormalization()(output_2) \n","  output_2 = Dense(12, activation = 'softmax')(output_2)\n","  return output_2\n","\n","conv_layers1 = ResNet50(weights='imagenet', include_top=False, input_shape=(224, 224,3)) #size -> 256, 256 \n","conv_layers1.trainable = False\n","\n","conv_layers2 = EfficientNetB0(weights='imagenet', include_top=False, input_shape=(224, 224,3)) #size -> 256, 256 \n","conv_layers2.trainable = False\n","\n","conv_layers3 = VGG19(weights='imagenet', include_top=False, input_shape=(224, 224,3)) #size -> 256, 256 \n","conv_layers3.trainable = False\n","\n","adam = Adam(learning_rate = 0.001)\n"]},{"cell_type":"code","execution_count":354,"metadata":{"executionInfo":{"elapsed":1420,"status":"ok","timestamp":1645502529643,"user":{"displayName":"­임훈","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"},"user_tz":-540},"id":"5puYuDjyO3mV"},"outputs":[],"source":["from tensorflow.python import keras\n","def make_model():\n","  image_input = Input((224,224,3))\n","\n","  conv1 = conv_layers1(image_input)\n","  conv1 = Flatten()(conv1)\n","  conv1 = Dense(16, activation = 'relu')(conv1)\n","  conv1 = Dropout(0.25)(conv1)\n","\n","  conv2 = conv_layers2(image_input)\n","  conv2 = Flatten()(conv2)\n","  conv2 = Dense(16,activation = 'relu')(conv2)\n","  conv2 = Dropout(0.25)(conv2)\n","\n","  conv3 = conv_layers3(image_input)\n","  conv3 = Flatten()(conv3)\n","  conv3 = Dense(16,activation = 'relu')(conv3)\n","  conv3 = Dropout(0.25)(conv3)\n","\n","  image_combined = concatenate([conv1,conv2,conv3])\n","  image = Dense(16, activation ='relu')(image_combined)\n","  image_output = Dropout(0.25)(image)\n","  \n","\n","  csvs_input = Input((2))\n","  csvs = Dense(16,activation = 'relu')(csvs_input)\n","  csvs = Dropout(0.25)(csvs)\n","  csvs_output = Dense(4, activation = 'relu')(csvs)\n","\n","  combined = concatenate([image_output,csvs_output])\n","  x = Dense(10, activation = 'relu')(combined)\n","  \n","  \n"," #output이 너무 많다 \n","  output_1 = output(x)\n","  # output_2 = output(x)\n","  # output_3 = output(x)\n","  # output_4 = output(x)\n","  # output_5 = output(x)\n","  # output_6 = output(x)\n","  # output_7 = output(x)\n","  # output_8 = output(x)\n","  # output_9 = output(x)\n","  # output_10 = output(x)\n","  # output_11 = output(x)\n","  # output_12 = output(x)\n","\n","  model = Model([image_input,csvs_input],output_1)\n","  model.compile(optimizer='adam',loss = 'sparse_categorical_crossentropy',metrics=['accuracy'])\n","  return model\n","model = make_model()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"PsO6QNg-SzVE"},"outputs":[],"source":["from tensorflow.keras.utils import plot_model\n","plot_model(model)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hhfdXFiKvsec"},"outputs":[],"source":["model.summary()"]},{"cell_type":"code","execution_count":355,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":646},"executionInfo":{"elapsed":383171,"status":"error","timestamp":1645502920818,"user":{"displayName":"­임훈","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"},"user_tz":-540},"id":"4vGjA_FdOk-N","outputId":"fa9c0237-acae-4ba1-e04c-94240a485c3e"},"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["loss =  0.679206907749176 , val_loss =  0.5630503296852112\n","\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r107/107 [==============================] - 18s 168ms/step - loss: 0.6792 - accuracy: 0.6000 - val_loss: 0.5631 - val_accuracy: 0.9000 - lr: 0.0010\n","Epoch 21/100\n"," 13/107 [==>...........................] - ETA: 13s - loss: 0.6791 - accuracy: 0.6058"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-355-b10cdf1df018>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# resnet50 + 224,224,3 + randomshuffle + random_aug + reduce_lr + multihead\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mhistory\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_generator\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mvalidation_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvalid_generator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepochs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mverbose\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcallbacks\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcallbacks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     62\u001b[0m     \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     63\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 64\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     65\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# pylint: disable=broad-except\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     66\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_batch_size, validation_freq, max_queue_size, workers, use_multiprocessing)\u001b[0m\n\u001b[1;32m   1382\u001b[0m                 _r=1):\n\u001b[1;32m   1383\u001b[0m               \u001b[0mcallbacks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_train_batch_begin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1384\u001b[0;31m               \u001b[0mtmp_logs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1385\u001b[0m               \u001b[0;32mif\u001b[0m \u001b[0mdata_handler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshould_sync\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1386\u001b[0m                 \u001b[0mcontext\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masync_wait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/util/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    148\u001b[0m     \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    149\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 150\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    151\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    152\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    913\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    914\u001b[0m       \u001b[0;32mwith\u001b[0m \u001b[0mOptionalXlaContext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jit_compile\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 915\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    916\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    917\u001b[0m       \u001b[0mnew_tracing_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexperimental_get_tracing_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m_call\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    945\u001b[0m       \u001b[0;31m# In this case we have created variables on the first call, so we run the\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    946\u001b[0m       \u001b[0;31m# defunned version which is guaranteed to never create variables.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 947\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_stateless_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# pylint: disable=not-callable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    948\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_stateful_fn\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    949\u001b[0m       \u001b[0;31m# Release the lock early so that multiple threads can perform the call\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   2955\u001b[0m        filtered_flat_args) = self._maybe_define_function(args, kwargs)\n\u001b[1;32m   2956\u001b[0m     return graph_function._call_flat(\n\u001b[0;32m-> 2957\u001b[0;31m         filtered_flat_args, captured_inputs=graph_function.captured_inputs)  # pylint: disable=protected-access\n\u001b[0m\u001b[1;32m   2958\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2959\u001b[0m   \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m_call_flat\u001b[0;34m(self, args, captured_inputs, cancellation_manager)\u001b[0m\n\u001b[1;32m   1852\u001b[0m       \u001b[0;31m# No tape is watching; skip to running the function.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1853\u001b[0m       return self._build_call_outputs(self._inference_function.call(\n\u001b[0;32m-> 1854\u001b[0;31m           ctx, args, cancellation_manager=cancellation_manager))\n\u001b[0m\u001b[1;32m   1855\u001b[0m     forward_backward = self._select_forward_and_backward_functions(\n\u001b[1;32m   1856\u001b[0m         \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36mcall\u001b[0;34m(self, ctx, args, cancellation_manager)\u001b[0m\n\u001b[1;32m    502\u001b[0m               \u001b[0minputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    503\u001b[0m               \u001b[0mattrs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mattrs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 504\u001b[0;31m               ctx=ctx)\n\u001b[0m\u001b[1;32m    505\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    506\u001b[0m           outputs = execute.execute_with_cancellation(\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/execute.py\u001b[0m in \u001b[0;36mquick_execute\u001b[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001b[0m\n\u001b[1;32m     53\u001b[0m     \u001b[0mctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mensure_initialized\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     54\u001b[0m     tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n\u001b[0;32m---> 55\u001b[0;31m                                         inputs, attrs, num_outputs)\n\u001b[0m\u001b[1;32m     56\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_NotOkStatusException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     57\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mname\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}],"source":["# resnet50 + 224,224,3 + randomshuffle + random_aug + reduce_lr + multihead \n","history = model.fit(train_generator,validation_data = valid_generator, epochs=100,verbose=1,callbacks=callbacks)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"iUi69BrvPvTu"},"outputs":[],"source":["# copy from https://gist.github.com/stared/dfb4dfaf6d9a8501cd1cc8b8cb806d2e\n","# loss 실시간 출력 \n","from IPython.display import clear_output\n","from tensorflow.keras.callbacks import Callback\n","\n","class PlotLosses(Callback):\n","\n","  def on_train_begin(self, logs={}):\n","    self.epochs = []\n","    self.losses = []\n","    self.val_losses = []\n","    self.logs = []\n","    self.fig = plt.figure()\n","\n","\n","  def on_epoch_end(self, epoch, logs={}):\n","\n","    self.epochs.append(epoch)\n","    self.losses.append(logs.get('loss'))\n","    self.val_losses.append(logs.get('val_loss'))\n","\n","    clear_output(wait=True)\n","    plt.plot(self.epochs, self.losses, label=\"loss\")\n","    plt.plot(self.epochs, self.val_losses, label=\"val_loss\")\n","    plt.legend()\n","    plt.show();\n","    print(\"loss = \", self.losses[-1], \", val_loss = \", self.val_losses[-1])\n","\n","#call backs 선언\n","plot_losses = PlotLosses()\n","\n","from tensorflow.keras.callbacks import ModelCheckpoint #<- model 저장 객체, best_model.h5라는 모델 이 저장 됨 \n","model_check_point = ModelCheckpoint(\n","    'best_model.h5', \n","    monitor='val_loss', \n","    verbose=1, \n","    save_best_only=True)\n","\n","\n","from tensorflow.keras.callbacks import EarlyStopping\n","early_stopping = EarlyStopping(\n","    monitor='val_loss',  # 모니터링 대상, 이걸 기준으로 멈춤 \n","    verbose=1,\n","    patience=50)         # 중지까지의 여유분\n","\n","from tensorflow.keras.callbacks import ReduceLROnPlateau\n","reduce_lr = ReduceLROnPlateau(\n","    monitor='val_loss', # 모니터링 대상\n","    patience=10,        # 대상ㅃ 기간동안 유지\n","    factor=0.2,         # 줄이는 양                              \n","    min_learning_rate=0.00001)     # 최소 학습율\n","\n","callbacks = [ plot_losses,reduce_lr]"]},{"cell_type":"markdown","metadata":{"id":"YrKmVZ3ErIyF"},"source":["#예측 및 평가 -> voting "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"GPJ6DeFKxQh1"},"outputs":[],"source":["y_ = model.predict(test_generator)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"lj9IUxcTxy4M"},"outputs":[],"source":["for i in range(12):\n","  exec(f'predicted_{i} = np.argmax(y_[{i}],axis=1)')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"abplTWCSyT37"},"outputs":[],"source":["target_0 = np.array(csvs[output_columns][valid:])[:,0]\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mVYwKRL5yu2A"},"outputs":[],"source":["temp = pd.DataFrame([predicted_0,predicted_1,predicted_2,predicted_3,predicted_4,predicted_5,predicted_6,predicted_7,predicted_8,predicted_9,predicted_10,predicted_11]).T\n","temp['index']=0"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"uFLp5gKj0J2h"},"outputs":[],"source":["for i in range(321):\n","  temp['index'].iloc[i*17:(i+1)*17] = i "]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":514,"status":"ok","timestamp":1645238372631,"user":{"displayName":"­임훈","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"},"user_tz":-540},"id":"VKwBNeo51t_a","outputId":"b43d48bd-8101-403c-a263-4eaa740edaa2"},"outputs":[{"data":{"text/plain":["0"]},"execution_count":460,"metadata":{},"output_type":"execute_result"}],"source":["round(np.mean(temp[temp['index']==0][0]))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"X6G9s42u2l5b"},"outputs":[],"source":["temp[temp['index']==0]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":383,"status":"ok","timestamp":1645238567463,"user":{"displayName":"­임훈","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"},"user_tz":-540},"id":"8Cy6sMSW2tww","outputId":"84a1109f-921a-4bd5-b002-0cd2c89f1411"},"outputs":[{"data":{"text/plain":["array([0., 0., 0., 1., 0., 0., 0., 1., 0., 1., 0., 0.])"]},"execution_count":476,"metadata":{},"output_type":"execute_result"}],"source":["np.round(np.mean(np.array(temp[temp['index']==0]),axis=0))[:-1]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ZQgVlP_O2LRc"},"outputs":[],"source":["predicted_y = pd.DataFrame(np.zeros(321*12).reshape(321,12))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"1miX5gl-2_YR"},"outputs":[],"source":["for i in range(321):\n","  predicted_y.iloc[i,:] = np.round(np.mean(np.array(temp[temp['index']==i]),axis=0))[:-1]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3q8edMHT3I6Z"},"outputs":[],"source":["predicted_y"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4PqAh7Ag3haj"},"outputs":[],"source":["test_y = csvs[valid:]\n","test_y = test_y.reset_index().drop(columns = 'index')\n","test_y.drop_duplicates(['성명'],keep='first')\n","test_y = np.array(test_y[output_columns])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-eCOzifk344h"},"outputs":[],"source":[""]},{"cell_type":"code","execution_count":null,"metadata":{"id":"AN7CeZm24oNn"},"outputs":[],"source":["from sklearn.metrics import precision_recall_fscore_support, classification_report,accuracy_score"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":394,"status":"ok","timestamp":1645239586384,"user":{"displayName":"­임훈","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"},"user_tz":-540},"id":"HxPmZnLU6kMI","outputId":"2d363f4b-5503-40cc-f7b1-5585bf2a067a"},"outputs":[{"name":"stdout","output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","           0       0.69      0.53      0.60       174\n","           1       0.54      0.35      0.42       130\n","           2       0.59      0.22      0.32       169\n","           3       0.57      0.55      0.56       164\n","           4       0.58      0.42      0.49       154\n","           5       0.58      0.54      0.56       158\n","           6       0.63      0.17      0.26       133\n","           7       0.74      0.86      0.80       235\n","           8       0.66      0.59      0.63       190\n","           9       0.61      0.62      0.61       165\n","          10       0.67      0.06      0.12       124\n","          11       0.71      0.32      0.44       111\n","\n","   micro avg       0.64      0.47      0.54      1907\n","   macro avg       0.63      0.44      0.48      1907\n","weighted avg       0.63      0.47      0.51      1907\n"," samples avg       0.61      0.48      0.47      1907\n","\n"]}],"source":["print(classification_report(test_y,np.array(predicted_y),target_names = ['0','1','2','3','4','5','6','7','8','9','10','11']))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":143},"executionInfo":{"elapsed":9,"status":"ok","timestamp":1645239442808,"user":{"displayName":"­임훈","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"},"user_tz":-540},"id":"3ih8lTgf58BG","outputId":"b64d1e26-338a-4106-fd85-241437ca7c71"},"outputs":[{"data":{"text/html":["\n","  <div id=\"df-9421066c-cef7-422f-86f4-dbbcb5274924\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","      <th>4</th>\n","      <th>5</th>\n","      <th>6</th>\n","      <th>7</th>\n","      <th>8</th>\n","      <th>9</th>\n","      <th>10</th>\n","      <th>11</th>\n","      <th>average</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>precision</th>\n","      <td>0.686567</td>\n","      <td>0.535714</td>\n","      <td>0.587302</td>\n","      <td>0.573248</td>\n","      <td>0.580357</td>\n","      <td>0.582192</td>\n","      <td>0.628571</td>\n","      <td>0.743590</td>\n","      <td>0.660819</td>\n","      <td>0.605882</td>\n","      <td>0.666667</td>\n","      <td>0.705882</td>\n","      <td>0.581292</td>\n","    </tr>\n","    <tr>\n","      <th>recall</th>\n","      <td>0.528736</td>\n","      <td>0.346154</td>\n","      <td>0.218935</td>\n","      <td>0.548780</td>\n","      <td>0.422078</td>\n","      <td>0.537975</td>\n","      <td>0.165414</td>\n","      <td>0.863830</td>\n","      <td>0.594737</td>\n","      <td>0.624242</td>\n","      <td>0.064516</td>\n","      <td>0.324324</td>\n","      <td>0.403055</td>\n","    </tr>\n","    <tr>\n","      <th>f1score</th>\n","      <td>0.597403</td>\n","      <td>0.420561</td>\n","      <td>0.318966</td>\n","      <td>0.560748</td>\n","      <td>0.488722</td>\n","      <td>0.559211</td>\n","      <td>0.261905</td>\n","      <td>0.799213</td>\n","      <td>0.626039</td>\n","      <td>0.614925</td>\n","      <td>0.117647</td>\n","      <td>0.444444</td>\n","      <td>0.446906</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9421066c-cef7-422f-86f4-dbbcb5274924')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-9421066c-cef7-422f-86f4-dbbcb5274924 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-9421066c-cef7-422f-86f4-dbbcb5274924');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["                  0         1         2  ...        10        11   average\n","precision  0.686567  0.535714  0.587302  ...  0.666667  0.705882  0.581292\n","recall     0.528736  0.346154  0.218935  ...  0.064516  0.324324  0.403055\n","f1score    0.597403  0.420561  0.318966  ...  0.117647  0.444444  0.446906\n","\n","[3 rows x 13 columns]"]},"execution_count":555,"metadata":{},"output_type":"execute_result"}],"source":["score = precision_recall_fscore_support(test_y,np.array(predicted_y))\n","score = pd.DataFrame([score[0],score[1],score[2]])\n","score.index = ['precision','recall','f1score']\n","score['average']=0\n","for i in range(3):\n","  score['average'].iloc[i] = np.mean(np.array(score)[i,:])\n","score"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":410,"status":"ok","timestamp":1645239773357,"user":{"displayName":"­임훈","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"},"user_tz":-540},"id":"x1GSGzuF7QNY","outputId":"37b31018-2a97-40ec-f98c-4c2f2f38753e"},"outputs":[{"name":"stdout","output_type":"stream","text":["accuracy = 0.6061786085150571\n"]}],"source":["acc = accuracy_score(test_y.reshape(321*12,),np.array(predicted_y).reshape(-1,))\n","print(f'accuracy = {acc}')"]}],"metadata":{"accelerator":"GPU","colab":{"background_execution":"on","collapsed_sections":[],"machine_shape":"hm","name":"22.02.22_2d_model2의 사본","provenance":[{"file_id":"1gtLMFwSiEGNVGDMRi4w_1mTxMMqWLiS4","timestamp":1645504053777},{"file_id":"1xGWMOsYCN90xmS3KtM7wbaByI6l9-ktm","timestamp":1645359842207},{"file_id":"1pZwwDcy03Jj_dM6dOU7Gi59mctIiJPVo","timestamp":1645266574968},{"file_id":"18tastMh4sxkdMSRQ3ShsNVmFNnRdzc2e","timestamp":1644885200151}],"mount_file_id":"1gtLMFwSiEGNVGDMRi4w_1mTxMMqWLiS4","authorship_tag":"ABX9TyO0gyJTPj8z5tTLJYsNu+FA"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}