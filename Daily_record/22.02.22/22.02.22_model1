{"cells":[{"cell_type":"markdown","metadata":{"id":"ydBBC3ycvL3M"},"source":["# 디렉토리 설정 "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"25gmHRCYEzmf"},"outputs":[],"source":["!unzip /content/drive/MyDrive/DataSet/KYR_B_imaging.zip\n","!cp '/content/drive/MyDrive/Colab Notebooks/CT분류프로젝트/Custom_Py/init.py' ./"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3T5U1_vVWqS8"},"outputs":[],"source":["!cp -r '/content/KYR_B_imaging/20201224 DL_MRI_SNSB_임승욱/swr3' '/content/KYR_B_imaging' \n","!cp -r '/content/KYR_B_imaging/20201224 DL_MRI_SNSB_임승욱/swr2 74' '/content/KYR_B_imaging' \n","!cp -r '/content/KYR_B_imaging/20201224 DL_MRI_SNSB_임승욱/swr5' '/content/KYR_B_imaging' \n","!cp -r '/content/KYR_B_imaging/20201224 DL_MRI_SNSB_임승욱/swr1' '/content/KYR_B_imaging' \n","!cp -r '/content/KYR_B_imaging/20201224 DL_MRI_SNSB_임승욱/swr7' '/content/KYR_B_imaging' \n","!cp -r '/content/KYR_B_imaging/20201224 DL_MRI_SNSB_임승욱/swr8' '/content/KYR_B_imaging' \n","!cp -r '/content/KYR_B_imaging/20201224 DL_MRI_SNSB_임승욱/swr4' '/content/KYR_B_imaging' \n","!cp -r '/content/KYR_B_imaging/20201224 DL_MRI_SNSB_임승욱/nswr1' '/content/KYR_B_imaging' \n","!cp -r '/content/KYR_B_imaging/20201224 DL_MRI_SNSB_임승욱/swr6' '/content/KYR_B_imaging' \n","!rm -r '/content/KYR_B_imaging/20201224 DL_MRI_SNSB_임승욱'"]},{"cell_type":"markdown","metadata":{"id":"zcZ1__VY3jdO"},"source":["# 초기작업"]},{"cell_type":"markdown","metadata":{"id":"4vWmiBmR0ege"},"source":["## 기본 DF 생성 "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rosYzDen1l6T"},"outputs":[],"source":["import os \n","import cv2 \n","import pandas as pd \n","from glob import glob\n","from tqdm import tqdm\n","from init import init #초기 설정용 커스텀 패키지 \n","import numpy as np \n","import matplotlib.pyplot as plt \n","import matplotlib.pyplot as cm \n","import warnings\n","warnings.filterwarnings('ignore')"]},{"cell_type":"markdown","metadata":{"id":"DdMMgGvZ3iDe"},"source":["###snsb_df 생성 "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ZJy_JgMFUqUQ"},"outputs":[],"source":["columns = ['성명',\n"," '병록번호',\n"," '만나이',\n"," '검사일',\n"," '교육년수',\n"," 'SVLT_recall_total_score_z',\n"," 'SVLT_Delayed_recall_z',\n"," 'SVLT_recognition_score_z',\n"," 'RCFT_immediate_recall_z',\n"," 'RCFT_delayed_recall_z',\n"," 'RCFT_recognition_score_z',\n"," 'K_MMSE_total_score_z',\n"," 'SNSB_II_Domain_Attention_z',\n"," 'SNSB_II_Domain_Language_z',\n"," 'SNSB_II_Domain_Visuospatial_z',\n"," 'SNSB_II_Domain_Memory_z',\n"," 'SNSB_II_Domain_Frontal_z']\n","\n","snsb_df = pd.read_csv('/content/drive/MyDrive/DataSet/202202_김예림/SNSB_integerated.csv')\n","snsb_df = snsb_df.drop([2098,2591]) #병록번호 없는 행 제거 <- 결측치 \n","snsb_df['병록번호'] = snsb_df['병록번호'].apply(lambda x : str(int(x))) #소수점으로 되어 있는 것 처리하고 str형 변형 \n","\n","snsb_df = snsb_df[columns]"]},{"cell_type":"markdown","metadata":{"id":"V7h0NIEotoIc"},"source":["###dir_df 생성 "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kerrOcyYidyv"},"outputs":[],"source":["#폴더 디렉토리\n","folder_dir = glob('/content/KYR_B_imaging/*')\n","dir_df = init.dir_df(folder_dir)\n","dir_df = dir_df.sort_values(by=['key','dir'])\n","dir_df = dir_df.reset_index().drop(columns = 'index')"]},{"cell_type":"markdown","metadata":{"id":"D2-wVYErkt2_"},"source":["### 병록번호- key 값 보정\n","- 자리수 다 다른거, 중복인거 보정 \n","- 9자리로 통일 "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"IlQnCKnF06He"},"outputs":[],"source":["target_length = [4,5,6,7,8] #<- 수정해야 하는 병록번호 갯수들 \n","\n","dir_df,snsb_df = init.key_mismatch(dir_df,snsb_df,target_length)\n","#인덱스 초기화 \n","dir_df = dir_df.reset_index().drop(columns = 'index')\n","# plt.hist(snsb_df['병록번호'].map(len))\n","# plt.show()\n","\n","#에러값들 제외 \n","errors = ['000758836-1' '030338456-1' '040145556-1' '050236926-1' '090374796-1'\n"," '100402746-1' '120010356-1' '870133669-1' '920033543-1' '930236559-1'\n"," '930257597-1' '970682600-1']\n","\n","dir_df = dir_df.drop(np.where(dir_df['key'].map(len)>9)[0])"]},{"cell_type":"markdown","metadata":{"id":"8s0QWgYB5fLR"},"source":["## new_dir_df 생성 - 이미지 장수 통일 \n"]},{"cell_type":"markdown","metadata":{"id":"b0iCEN_oc40h"},"source":["### key 값 별 이미지 장수 연산 "]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4630,"status":"ok","timestamp":1645454626583,"user":{"displayName":"­임훈","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"},"user_tz":-540},"id":"tJ0qOVhtjdjK","outputId":"fadcaaf9-df86-4adb-9149-643576e77193"},"outputs":[{"data":{"text/plain":["1606"]},"execution_count":243,"metadata":{},"output_type":"execute_result"}],"source":["#이미지 장수 연산 \n","keys = list(set(dir_df['key'])) \n","images_length = pd.DataFrame(keys)[0].apply(lambda x: init.check_images(dir_df,x)) #키 값별로 이미지의 장수들 계산 \n","# images_length.value_counts()\n","\n","length_df = pd.DataFrame([keys,images_length]).T\n","length_df.columns = ['key','image_length']\n","length_df['image_length']  = length_df['image_length'].map(int)\n","\n","#Standard를 기준으로 less over 분할 \n","standard = 19 # 통일 시킬 이미지 장 수 기준 \n","\n","# 조정이 필요한 장 수 초과하는 것들만 추림 \n","length_df_over = length_df[length_df['image_length']>standard]\n","\n","#19장 보다 적은 경우 \n","# length_df_less = length_df[length_df['image_length']<standard]\n","\n","len(length_df_over)"]},{"cell_type":"markdown","metadata":{"id":"KiMO161I-boA"},"source":["### key값 별로 이미지 19장 있는 new_dir_df 생성 "]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":8544,"status":"ok","timestamp":1645454636324,"user":{"displayName":"­임훈","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"},"user_tz":-540},"id":"W0T5XeyUeyOm","outputId":"370d0139-05f6-4830-e785-b87938daec14"},"outputs":[{"name":"stderr","output_type":"stream","text":["100%|██████████| 1606/1606 [00:08<00:00, 194.45it/s]\n"]}],"source":["new_dir_df = pd.DataFrame(np.zeros(len(length_df_over)*19*2).reshape(-1,2))\n","new_dir_df.columns = dir_df.columns\n","\n","for index in tqdm(range(len(length_df_over))):\n","  new_dir_df.iloc[index*19:(index+1)*19,:]  = dir_df.loc[init.droped_indexes(dir_df,length_df_over,index,standard=19)]\n","new_dir_df = new_dir_df.sort_values(by=['key','dir'])\n","new_dir_df = new_dir_df.reset_index().drop(columns = 'index')"]},{"cell_type":"markdown","metadata":{"id":"fggGNd-N0YfV"},"source":["## csvs 생성 - z 스코어 임베딩 + 중복제거 \n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":400,"status":"ok","timestamp":1645454636706,"user":{"displayName":"­임훈","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"},"user_tz":-540},"id":"aqe-IPZm0hvy","outputId":"1748c449-b33f-420d-fe53-b63a49d66047"},"outputs":[{"name":"stdout","output_type":"stream","text":["1606 1606\n"]}],"source":["#19장의 사진으로 추린 new_dir_df로 새로운 키 리스트만듬) \n","\n","key_lists = np.unique(new_dir_df['key'])\n","key_lists.sort()\n","\n","Embedding_columns = snsb_df.columns[5:]\n","\n","for column in Embedding_columns:\n","  snsb_df[f'E_{column}'] = snsb_df[column].map(init.zscore_Embedding)\n","\n","#정렬 \n","snsb_df = snsb_df.sort_values(by=['병록번호'])\n","new_dir_df = new_dir_df.sort_values(by=['key','dir'])\n","\n","#snsb_df 중 key_lists에 있는 행들만 추림 -> csvs \n","csvs = snsb_df[snsb_df['병록번호'].apply(lambda x : x in key_lists)].sort_values(by=['병록번호'])\n","csvs = csvs.reset_index().drop(columns = 'index')\n","\n","#중복 제거 : 이름으로 정렬 후 중복 제거 \n","csvs = csvs.sort_values(by=['성명'])\n","csvs = csvs.drop_duplicates(['병록번호'], keep = 'first')\n","\n","#다시 병록번호 로 정렬 해서 csvs 와 new_dir_df 순을 맞춤 \n","csvs = csvs.sort_values(['병록번호'])\n","csvs = csvs.reset_index().drop(columns = 'index')\n","new_dir_df = new_dir_df.sort_values(by=['key','dir'])\n","new_dir_df = new_dir_df.reset_index().drop(columns = 'index')\n","\n","#맞춤 확인 \n","print(len(csvs),len(np.unique(new_dir_df['key'])))"]},{"cell_type":"markdown","metadata":{"id":"W7ML5r7Z4i0U"},"source":["# 전처리"]},{"cell_type":"markdown","metadata":{"id":"EX-1jaFPVI4F"},"source":["## new_dir_df 증강 "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"lNtzO8yETCF0"},"outputs":[],"source":["new_dir_df['dir_1'] = 0\n","new_dir_df['dir_2'] = 0 \n","new_dir_df['dir_1'].iloc[:-1] = new_dir_df['dir'].iloc[1:]\n","new_dir_df['dir_2'].iloc[:-2] = new_dir_df['dir'].iloc[2:]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"k6xdTC1cQNcy"},"outputs":[],"source":["i = 0 \n","drop_indexes = [] \n","for i in range(len(key_lists)):\n","  drop_index = new_dir_df[new_dir_df['key']==key_lists[i]].iloc[17:20,].index\n","  drop_indexes.append(drop_index)\n","drop_indexes = np.array(drop_indexes).reshape(-1,)\n","new_dir_df.drop(drop_indexes,inplace=True)\n","new_dir_df = new_dir_df.reset_index().drop(columns = 'index')"]},{"cell_type":"markdown","metadata":{"id":"2I0_BW-5YyZh"},"source":["## csvs 증강 "]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":277,"status":"ok","timestamp":1645454647672,"user":{"displayName":"­임훈","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"},"user_tz":-540},"id":"86aUi3ehlbSj","outputId":"8b42ba9d-da78-487c-fcef-679bd0c1fb2a"},"outputs":[{"name":"stderr","output_type":"stream","text":["100%|██████████| 16/16 [00:00<00:00, 249.56it/s]\n"]}],"source":["temp_csvs = np.array(csvs)\n","for i in tqdm(range(16)):\n","  temp_csvs = np.vstack([temp_csvs,np.array(csvs)])\n","temp_csvs = pd.DataFrame(temp_csvs)\n","temp_csvs.columns = csvs.columns\n","csvs = temp_csvs.sort_values(by=['병록번호']).reset_index().drop(columns = 'index')"]},{"cell_type":"markdown","metadata":{"id":"FpQ6WGP4LF-I"},"source":["## Augmentation "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pbX4pUJcLJDY"},"outputs":[],"source":["#이미지 콘트라스트 변경 \n","def img_Contrast(img): \n","  import cv2 \n","  lab = cv2.cvtColor(img, cv2.COLOR_BGR2LAB)\n","  l, a, b = cv2.split(lab)\n","  clahe = cv2.createCLAHE(clipLimit=3.0, tileGridSize=(8, 8)) \n","  cl = clahe.apply(l)\n","  limg = cv2.merge((cl, a, b))\n","  final = cv2.cvtColor(limg, cv2.COLOR_LAB2BGR)\n","  return final \n","#가우시안 블러 \n","def gaussianblur(image):\n","  import cv2 \n","  import numpy as np \n","  blur = cv2.GaussianBlur(image, (5,5), np.random.randint(0,3,1))\n","  return blur\n","\n","#랜덤 어그먼테이션 \n","def random_aug(aug_image):\n","  import numpy as np \n","  import cv2 \n","  n = np.random.randint(0,4,1)\n","  if n == 0:\n","    aug_image = cv2.flip(aug_image,np.random.randint(0,2,1))\n","  if n == 1:\n","    # aug_image = img_Contrast(aug_image)\n","    return aug_image\n","  if n ==2:\n","    aug_image = gaussianblur(aug_image)\n","  return aug_image\n","  if n ==3:\n","    return aug_image "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zKC5TzWeXBKH"},"outputs":[],"source":[""]},{"cell_type":"markdown","metadata":{"id":"ZaVmNxsN-JvR"},"source":["## 이미지 전처리"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"d-z0VSeyBA6b"},"outputs":[],"source":["def plot_img(temp_img):\n","  plt.figure(figsize=(10,10))\n","  plt.imshow(temp_img)\n","  plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"thvDsi6n-GgV"},"outputs":[],"source":["#이미지 전처리 \n","def img_preprocess(img):\n","  shape = img.shape[0]\n","  preprocessed_img = img[int(shape*0.05):int(shape*0.95),int(shape*0.1):int(shape*0.9),:] #crop \n","  preprocessed_img = cv2.cvtColor(preprocessed_img, cv2.COLOR_BGR2GRAY)\n","  preprocessed_img = cv2.resize(preprocessed_img,dsize=(224,224)) #resize Albu mentations -> vision 관련 augmentation document \n","  preprocessed_img = preprocessed_img/255.\n","  preprocessed_img = efficientnet.preprocess_input(preprocessed_img) \n","  return preprocessed_img \n","\n","\n","#더미 넘파이 만든 후 거기다 224,224 grayscale 이미지 넣음\n","#디렉토리 df로 이미지 만듬 \n","def read_imgs(indexed_df):\n","    temp_img_1 = img_preprocess(cv2.imread(indexed_df['dir']))\n","    temp_img_2 = img_preprocess(cv2.imread(indexed_df['dir_1']))\n","    temp_img_3 = img_preprocess(cv2.imread(indexed_df['dir_2']))\n","    temp_imgs = np.stack([temp_img_1,temp_img_2,temp_img_3],axis=2)\n","    temp_imgs = random_aug(temp_imgs) #어그먼테이션 \n","    return temp_imgs\n","\n"]},{"cell_type":"markdown","metadata":{"id":"x4DZ7OS8nkyd"},"source":["# 데이터 제너레이터"]},{"cell_type":"markdown","metadata":{"id":"2fOR-6Hj5Cqd"},"source":["## 사전설정"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"WfdUHzsn8qQp"},"outputs":[],"source":["input_columns = ['만나이','교육년수']\n","output_columns = ['E_SVLT_recall_total_score_z', 'E_SVLT_Delayed_recall_z',\n","       'E_SVLT_recognition_score_z', 'E_RCFT_immediate_recall_z',\n","       'E_RCFT_delayed_recall_z', 'E_RCFT_recognition_score_z',\n","       'E_K_MMSE_total_score_z', 'E_SNSB_II_Domain_Attention_z',\n","       'E_SNSB_II_Domain_Language_z', 'E_SNSB_II_Domain_Visuospatial_z',\n","       'E_SNSB_II_Domain_Memory_z', 'E_SNSB_II_Domain_Frontal_z']\n","\n","csvs_max = np.array([90,18])\n","csvs_min = np.array([45,0])"]},{"cell_type":"code","execution_count":290,"metadata":{"executionInfo":{"elapsed":286,"status":"ok","timestamp":1645489158036,"user":{"displayName":"­임훈","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"},"user_tz":-540},"id":"H2W_q0UKNRwm"},"outputs":[],"source":["from tensorflow.keras.preprocessing import image\n","from tensorflow.keras.utils import Sequence\n","import math\n","\n","\n","class DataGenerator(Sequence):\n","  def __init__(self,\n","                 new_dir_df,\n","                 csvs,\n","                 batch_size: int,\n","                 augmentation: bool = False,\n","                 shuffle: bool = False,\n","                 rescale:bool = True) -> None:\n","        self.input_columns = input_columns \n","        self.output_columns = output_columns\n","        self.batch_size = batch_size\n","        self.shuffle = shuffle\n","        self.augmentation = augmentation\n","        self.rescale =rescale\n","        self.new_dir_df = new_dir_df\n","        self.csvs = csvs\n","\n","  def __len__(self):\n","    return math.ceil(len(self.new_dir_df) / self.batch_size)\n","    \n","  def on_epoch_end(self):\n","    self.indices = np.arange(len(self.new_dir_df))\n","    if self.shuffle == True:\n","      np.random.shuffle(self.indices)\n","      self.new_dir_df = self.new_dir_df.iloc[self.indices]\n","      self.csvs = self.csvs.iloc[self.indices]\n","\n","\n","\n","  def __getitem__(self, index):\n","    csvs_input = self.csvs[self.input_columns].iloc[index*self.batch_size:(index+1)*self.batch_size,:]\n","    csvs_output = self.csvs[self.output_columns].iloc[index*self.batch_size : (index+1)*self.batch_size,:]\n","    imgs_dir_df = self.new_dir_df[index*self.batch_size : (index+1)*self.batch_size]\n","\n","    imgs = []\n","    for i in range(len(imgs_dir_df)):\n","      indexed_df = imgs_dir_df.iloc[i,:]\n","      temp_imgs = read_imgs(indexed_df)\n","      imgs.append(temp_imgs)\n","    imgs = np.array(imgs)\n","\n","    csvs_input = np.array(csvs_input).astype(np.float)\n","    csvs_input = (csvs_input - csvs_min)/(csvs_max - csvs_min)\n","    csvs_output = np.array(csvs_output).astype(np.float)\n","    imgs=  np.array(imgs).astype(np.float)\n","    \n","    # return [imgs, csvs_input], csvs_output\n","    # return [imgs,csvs_input], [np.array(csvs_output[:,0]),np.array(csvs_output[:,1]),np.array(csvs_output[:,2]),np.array(csvs_output[:,3]),\n","    #               np.array(csvs_output[:,4]),np.array(csvs_output[:,5]),np.array(csvs_output[:,6]),np.array(csvs_output[:,7]),\n","    #               np.array(csvs_output[:,8]),np.array(csvs_output[:,9]),np.array(csvs_output[:,10]),np.array(csvs_output[:,11])]\n","    \n","    return [imgs,csvs_input], np.array(csvs_output[:,0])\n","\n","# train = 964*17\n","# valid = 1285*17\n","train = 50*17\n","valid = 60*17\n","train_generator = DataGenerator(new_dir_df[:train],csvs[:train],batch_size=64,shuffle=True)\n","valid_generator = DataGenerator(new_dir_df[train:valid],csvs[train:valid],batch_size=64,shuffle=False)\n","test_generator = DataGenerator(new_dir_df[valid:],csvs[valid:],batch_size=64)"]},{"cell_type":"markdown","metadata":{"id":"SwYYl4mdFEO4"},"source":["1. 모델 구조 \n","2. 스케일링 \n","3. 아웃풋 \n","4. 어그먼테이션 \n","5. "]},{"cell_type":"markdown","metadata":{"id":"5MlWvHz75Mma"},"source":["train : 964*17\n","\n","valid : [964~1285]*17\n","\n","test : [1285~1606]*17 \n","\n","약 60:20:20"]},{"cell_type":"markdown","metadata":{"id":"5zG5rfQ9OaJn"},"source":["#모델"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Zw4xryIZObDe"},"outputs":[],"source":["from tensorflow.keras import optimizers\n","import tensorflow as tfa \n","from tensorflow.keras import layers\n","from tensorflow.keras.layers import Bidirectional, LSTM, GRU\n","from tensorflow.keras.layers import BatchNormalization,Conv2D,MaxPooling2D,Activation,Dropout,Dense,Flatten,Input,Conv3D,MaxPooling3D\n","from tensorflow.keras.layers import Conv3D, ConvLSTM2D, BatchNormalization, Input, Dropout, Bidirectional\n","from tensorflow.keras import Model\n","from tensorflow.keras.layers import concatenate\n","from tensorflow.keras.applications import resnet50, efficientnet\n","from tensorflow.keras.applications import ResNet50, EfficientNetB0"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vSNz8LLxSBPP"},"outputs":[],"source":["def output(x):\n","  output_2 = Dense(32,activation = 'relu')(x)\n","  output_2 = BatchNormalization()(output_2)\n","  output_2 = Dense(16,activation = 'relu')(output_2)\n","  output_2 = BatchNormalization()(output_2) \n","  output_2 = Dense(2, activation = 'softmax')(output_2)\n","  return output_2\n","\n","conv_layers = EfficientNetB0(weights='imagenet', include_top=False, input_shape=(224, 224,3)) #size -> 256, 256 \n","conv_layers.trainable = False"]},{"cell_type":"code","execution_count":291,"metadata":{"executionInfo":{"elapsed":1343,"status":"ok","timestamp":1645489162090,"user":{"displayName":"­임훈","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"},"user_tz":-540},"id":"x7JIaUpJOedL"},"outputs":[],"source":["from tensorflow.python import keras\n","def make_model():\n","  image_input = Input((224,224,3))\n","  image = conv_layers(image_input) \n","  image = Dense(32,activation = 'relu')(image)\n","  image = Dropout(0.2)(image)\n","  image = Flatten()(image)\n","  image_output = Dense(10, activation = 'relu')(image)\n","\n","\n","  csvs_input = Input((2))\n","  csvs = Dense(32,activation = 'relu')(csvs_input)\n","  csvs = Dropout(0.2)(csvs)\n","  csvs_output = Dense(10, activation = 'relu')(csvs)\n","\n","  combined = concatenate([image_output,csvs_output])\n","  x = Dense(10, activation = 'relu')(combined)\n","  \n","  \n"," #output이 너무 많다 \n","  output_1 = output(x)\n","  output_2 = output(x)\n","  output_3 = output(x)\n","  output_4 = output(x)\n","  output_5 = output(x)\n","  output_6 = output(x)\n","  output_7 = output(x)\n","  output_8 = output(x)\n","  output_9 = output(x)\n","  output_10 = output(x)\n","  output_11 = output(x)\n","  output_12 = output(x)\n","\n","  # model = Model([image_input,csvs_input],[output_1,output_2,output_3,output_4,output_5,output_6,output_7,output_8,output_9,output_10,output_11,output_12])\n","  model = Model([image_input,csvs_input],output_1)\n","  model.compile(optimizer='RMSprop',loss = 'sparse_categorical_crossentropy',metrics=['accuracy'])\n","  return model\n","model = make_model()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"PsO6QNg-SzVE"},"outputs":[],"source":["from tensorflow.keras.utils import plot_model\n","plot_model(model)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hhfdXFiKvsec"},"outputs":[],"source":["model.summary()"]},{"cell_type":"code","execution_count":292,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":646},"id":"CZL8jH6kZiUp","executionInfo":{"status":"error","timestamp":1645490263873,"user_tz":-540,"elapsed":1100285,"user":{"displayName":"­임훈","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"}},"outputId":"1f145cc9-b9e2-43d7-e96a-f1f6d8180bfa"},"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["loss =  0.610722005367279 , val_loss =  0.5864827632904053\n","\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r14/14 [==============================] - 17s 1s/step - loss: 0.6107 - accuracy: 0.6671 - val_loss: 0.5865 - val_accuracy: 0.6000 - lr: 1.6000e-06\n","Epoch 64/100\n"," 6/14 [===========>..................] - ETA: 7s - loss: 0.6206 - accuracy: 0.6627"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-292-9f52f45bfad4>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# efficientnetb0 + 224,224,3 + randomshuffle + random_aug + reduce_lr + multihead\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mhistory\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_generator\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mvalidation_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvalid_generator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepochs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mverbose\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcallbacks\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcallbacks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     62\u001b[0m     \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     63\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 64\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     65\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# pylint: disable=broad-except\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     66\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_batch_size, validation_freq, max_queue_size, workers, use_multiprocessing)\u001b[0m\n\u001b[1;32m   1382\u001b[0m                 _r=1):\n\u001b[1;32m   1383\u001b[0m               \u001b[0mcallbacks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_train_batch_begin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1384\u001b[0;31m               \u001b[0mtmp_logs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1385\u001b[0m               \u001b[0;32mif\u001b[0m \u001b[0mdata_handler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshould_sync\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1386\u001b[0m                 \u001b[0mcontext\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masync_wait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/util/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    148\u001b[0m     \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    149\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 150\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    151\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    152\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    913\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    914\u001b[0m       \u001b[0;32mwith\u001b[0m \u001b[0mOptionalXlaContext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jit_compile\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 915\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    916\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    917\u001b[0m       \u001b[0mnew_tracing_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexperimental_get_tracing_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m_call\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    945\u001b[0m       \u001b[0;31m# In this case we have created variables on the first call, so we run the\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    946\u001b[0m       \u001b[0;31m# defunned version which is guaranteed to never create variables.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 947\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_stateless_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# pylint: disable=not-callable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    948\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_stateful_fn\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    949\u001b[0m       \u001b[0;31m# Release the lock early so that multiple threads can perform the call\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   2955\u001b[0m        filtered_flat_args) = self._maybe_define_function(args, kwargs)\n\u001b[1;32m   2956\u001b[0m     return graph_function._call_flat(\n\u001b[0;32m-> 2957\u001b[0;31m         filtered_flat_args, captured_inputs=graph_function.captured_inputs)  # pylint: disable=protected-access\n\u001b[0m\u001b[1;32m   2958\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2959\u001b[0m   \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m_call_flat\u001b[0;34m(self, args, captured_inputs, cancellation_manager)\u001b[0m\n\u001b[1;32m   1852\u001b[0m       \u001b[0;31m# No tape is watching; skip to running the function.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1853\u001b[0m       return self._build_call_outputs(self._inference_function.call(\n\u001b[0;32m-> 1854\u001b[0;31m           ctx, args, cancellation_manager=cancellation_manager))\n\u001b[0m\u001b[1;32m   1855\u001b[0m     forward_backward = self._select_forward_and_backward_functions(\n\u001b[1;32m   1856\u001b[0m         \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36mcall\u001b[0;34m(self, ctx, args, cancellation_manager)\u001b[0m\n\u001b[1;32m    502\u001b[0m               \u001b[0minputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    503\u001b[0m               \u001b[0mattrs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mattrs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 504\u001b[0;31m               ctx=ctx)\n\u001b[0m\u001b[1;32m    505\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    506\u001b[0m           outputs = execute.execute_with_cancellation(\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/execute.py\u001b[0m in \u001b[0;36mquick_execute\u001b[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001b[0m\n\u001b[1;32m     53\u001b[0m     \u001b[0mctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mensure_initialized\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     54\u001b[0m     tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n\u001b[0;32m---> 55\u001b[0;31m                                         inputs, attrs, num_outputs)\n\u001b[0m\u001b[1;32m     56\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_NotOkStatusException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     57\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mname\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}],"source":["# efficientnetb0 + 224,224,3 + randomshuffle + random_aug + reduce_lr + multihead \n","history = model.fit(train_generator,validation_data = valid_generator, epochs=100,verbose=1,callbacks=callbacks)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":664},"executionInfo":{"elapsed":27091626,"status":"error","timestamp":1645482426334,"user":{"displayName":"­임훈","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"},"user_tz":-540},"id":"4vGjA_FdOk-N","outputId":"ea96ab5a-5b87-472f-b431-fee2bd483b48"},"outputs":[{"data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAXQAAAD4CAYAAAD8Zh1EAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nO2dd3xb5fX/34+GLe/tJI6dOCHDWSQQB0gggQBllULZ0DLbQktbRge/ltJJd6EtbWmhtKWML1DCKGUTCIGQQkMGCdkhw3Hs2I73HrL0/P54JFu2JVuylUhyzvv10uta915fHdvJR0efe55zlNYaQRAEIfaxRDoAQRAEITyIoAuCIIwSRNAFQRBGCSLogiAIowQRdEEQhFGCLVIvnJ2drQsLCyP18oIgCDHJ+vXra7TWOf6ORUzQCwsLWbduXaReXhAEISZRSu0PdEwsF0EQhFGCCLogCMIoQQRdEARhlBAxD10QhKMTp9NJWVkZHR0dkQ4lqnE4HOTn52O324P+HhF0QRCOKGVlZaSkpFBYWIhSKtLhRCVaa2praykrK2PSpElBf59YLoIgHFE6OjrIysoSMR8EpRRZWVkhf4oRQRcE4YgjYj40w/kdxZyg76xs5rfLd1Lb0hnpUARBEKKKmBP0PdUt/Ont3VSLoAuCMEySk5MjHcJhIeYEPcFuBaC9yxXhSARBEKKLmBP0eLsJucPpjnAkgiDEOlpr7rjjDmbPns2cOXN4+umnAaioqGDJkiXMmzeP2bNn89577+Fyubj++ut7zv39738f4egHEnNliw5Pht7RLRm6IMQ6P3lpK9sONoX1mjPzUvnRZ2YFde7zzz/Pxo0b2bRpEzU1NSxYsIAlS5bw5JNPcvbZZ3PXXXfhcrloa2tj48aNlJeXs2XLFgAaGhrCGnc4iLkM3Wu5dIjlIgjCCFm9ejVXXXUVVquVMWPGcOqpp7J27VoWLFjAP//5T3784x+zefNmUlJSmDx5Mnv37uWWW27h9ddfJzU1NdLhD0AydEEQIkawmfSRZsmSJaxatYpXXnmF66+/nm9+85tce+21bNq0iTfeeIMHH3yQZcuW8fDDD0c61D7EXIbuEA9dEIQwsXjxYp5++mlcLhfV1dWsWrWKE044gf379zNmzBhuvPFGvvSlL7FhwwZqampwu91ccskl/OxnP2PDhg2RDn8AsZeh26TKRRCE8HDRRRfxwQcfMHfuXJRS/OY3v2Hs2LE8+uij3HPPPdjtdpKTk3nssccoLy/nhhtuwO02yeQvf/nLCEc/kJgT9IQ4sVwEQRgZLS0tgFmNec8993DPPff0OX7ddddx3XXXDfi+aMzKfYk5yyXeJpaLIAiCP2JO0JVSxNssdDolQxcEQfAl5gQdjO3SLoIuCILQh5gUdIfNSocIuiAIQh9iU9DtFvHQBUEQ+hGjgi6WiyAIQn9iVtDFchEEQehLjAq6hU6xXARBOAIM1ju9pKSE2bNnH8FoBicmBT1BLBdBEIQBxNxKURDLRRBGDa99Fyo3h/eaY+fAub8KePi73/0uBQUFfO1rXwPgxz/+MTabjZUrV1JfX4/T6eRnP/sZF154YUgv29HRwc0338y6deuw2Wz87ne/Y+nSpWzdupUbbriBrq4u3G43zz33HHl5eVx++eWUlZXhcrn4wQ9+wBVXXDGiHxtiWdBl6b8gCMPgiiuu4Pbbb+8R9GXLlvHGG29w6623kpqaSk1NDSeddBIXXHBBSIOa//znP6OUYvPmzezYsYOzzjqLXbt28eCDD3Lbbbfx+c9/nq6uLlwuF6+++ip5eXm88sorADQ2NoblZ4tRQZeyRUEYFQySSR8ujjvuOA4dOsTBgweprq4mIyODsWPH8o1vfINVq1ZhsVgoLy+nqqqKsWPHBn3d1atXc8sttwBQVFTExIkT2bVrFwsXLuTnP/85ZWVlXHzxxUydOpU5c+bwrW99i+985zucf/75LF68OCw/W0x66A67VQZcCIIwbC677DKeffZZnn76aa644gqeeOIJqqurWb9+PRs3bmTMmDF0dHSE5bU+97nP8eKLL5KQkMB5553H22+/zbRp09iwYQNz5szh+9//PnfffXdYXitGM3SxXARBGD5XXHEFN954IzU1Nbz77rssW7aM3Nxc7HY7K1euZP/+/SFfc/HixTzxxBOcfvrp7Nq1i9LSUqZPn87evXuZPHkyt956K6WlpXz88ccUFRWRmZnJ1VdfTXp6On//+9/D8nPFpqDbrDhdmm6XG5s1Jj9kCIIQQWbNmkVzczPjx49n3LhxfP7zn+czn/kMc+bMobi4mKKiopCv+dWvfpWbb76ZOXPmYLPZeOSRR4iPj2fZsmU8/vjj2O12xo4dy/e+9z3Wrl3LHXfcgcViwW6388ADD4Tl51Ja66FPUuobwJcADWwGbtBaD/g8opS6BHgWWKC1XjfYNYuLi/W6dYOeEpCHVu3hF6/uYMtPziY5PibfkwThqGX79u3MmDEj0mHEBP5+V0qp9VrrYn/nD5neKqXGA7cCxVrr2YAVuNLPeSnAbcCaYcQdEj1zRaV0URAEoYdg01sbkKCUcgKJwEE/5/wU+DVwR5hiC4h3DJ0IuiAIR4LNmzdzzTXX9NkXHx/PmjWHPX8NiSEFXWtdrpS6FygF2oHlWuvlvucopY4HCrTWryilAgq6Uuom4CaACRMmDDtoR5wIuiDEMlrrkGq8I82cOXPYuHHjEX3NYOzw/gRjuWQAFwKTgDwgSSl1tc9xC/A74FtBBPiQ1rpYa12ck5MTcrBeHDKGThBiFofDQW1t7bAE62hBa01tbS0OhyOk7wvGcjkT2Ke1rgZQSj0PLAL+z3M8BZgNvON5xx0LvKiUumCoG6PDRTx0QYhd8vPzKSsro7q6OtKhRDUOh4P8/PyQvicYQS8FTlJKJWIslzOAHqHWWjcC2d7nSql3gG8fLjEHM4IOJEMXhFjEbrczadKkSIcxKhnSctFar8GUIm7AlCxagIeUUncrpS44zPH5xXtTVDouCoIg9BJUlYvW+kfAj/rt/mGAc08bYUxD4rB7PXQRdEEQBC8xucxSPHRBEISBiKALgiCMEmJU0KVsURAEoT8xKuiSoQuCIPQnJgXdbrVgsyipchEEQfAhJgUdvHNFxXIRBEHwEsOCbpEhF4IgCD7EsKBbxUMXBEHwQQRdEARhlBDDgm4RD10QBMGHmBX0BMnQBUEQ+hCzgu6wW6VsURAEwYeYFfR4m5QtCoIg+BKzgu6wW+iUDF0QBKGHmBX0BLFcBEEQ+hCzgi5li4IgCH2JYUGXskVBEARfYlbQE+xWOrpdMjlcEATBQ8wKerzditbQ2S1ZuiAIAsSwoHt7oneK7SIIggDEsKAneIdcSMdFQRAEIIYF3TuGrr1LBF0QBAFiWtAlQxcEQfAlZgW9x3IRD10QBAGIYUGPF8tFEAShDzEr6GK5CIIg9CVmBT2hp2xRBF0QBAFiWNAd4qELgiD0IYYF3eOhS4YuCIIAxLKg27wZugi6IAgCxLCgJ8SJ5SIIguBLzAp6vE0sF0EQBF9iVtCVUsTbZAydIAiCl6AEXSn1DaXUVqXUFqXUU0opR7/j31RKbVNKfayUWqGUmnh4wu1LQpxMLRIEQfAypKArpcYDtwLFWuvZgBW4st9pH3mOHws8C/wm3IH6w2GTuaKCIAhegrVcbECCUsoGJAIHfQ9qrVdqrds8T/8H5IcvxMDIGDpBEIRehhR0rXU5cC9QClQAjVrr5YN8yxeB1/wdUErdpJRap5RaV11dPZx4+yCDogVBEHoJxnLJAC4EJgF5QJJS6uoA514NFAP3+DuutX5Ia12stS7OyckZftQeHHYrHTKCThAEAQjOcjkT2Ke1rtZaO4HngUX9T1JKnQncBVygte4Mb5j+cdgtdEi3RUEQBCA4QS8FTlJKJSqlFHAGsN33BKXUccBfMWJ+KPxh+ifBbpVui4IgCB6C8dDXYCpXNgCbPd/zkFLqbqXUBZ7T7gGSgWeUUhuVUi8eroB9EQ9dEAShF1swJ2mtfwT8qN/uH/ocPzOcQQWLwy5li4IgCF5idqUoSNmiIAiCLzEu6GK5CIIgeBFBFwRBGCXEtqDbrDhdGpdbRzoUQRCEiBPTgp4QZ8KXLF0QBCHGBb13rqgIuiAIQmwLumcMnZQuRhBXN2x8EtxSbSQIkSa2BV3G0EWekvfghZuh7MNIRyIIRz2xLeg28dAjTmeT2XY0RjYOQRBiXNDFQ488XZ42+J3NkY1DEITYFvSEo81y+ffN8MZdkY6iL85Ws+1qjWwcgiAE18slWvHeFD1qMvSyDyF5bKSj6Is3Q+9qiWwcgiDEdobusHs89KOlhW57Q/QJp9NruURZXIJwFBLjgu4pWzwahlxoDe310Sfo3niiLS5BOAoZFYJ+VIyh62oB7Yq+TFgsF0GIGmJc0E34nUeDh97eYLbRJpxey0VuigpCxIlxQT+KLJcOH0GPplWZXiGPtk8OgnAUEtOCbrdasFnU0XFT1JuhQ2+pYDhorYHuEcz07snQpQ5dECJNTAs6eHuiR1HGerhor+/9OlzZcFcr3L8AVv9+BNcQy0UQooVRIOiWo6M5V4dPhh4uH33L89BeBw0Hhn8Np1gughAtjAJBP0qmFvlaLuFaZr/hUbP1fbMIFalyEYSoYVQIeufRYLmEO0Ov2gZlaz3XHkFjLacIuiBECzG99B+M5XJ0ZOhh9tA3PAbWOBh77MgE3bfKRWtQauSxCYIwLGI+Q0+wW48OD729AZTnzzXSbNjZAR//C4rOh8zJI8/QlcUseuruGFlcgiCMiJgX9KPGQ+9ogJQ88/VIPfTtL5mMf/514Ejr7WkeKi4nuLogMds8l0oXQYgoMS/o8bajpWyxAdILzNcjzdA3PAoZhVC4xAh6R6OxS0LFK+ApY8xWeqILQkSJeUE/ajz0jgZI9WboIxD02j1mbNxx14DFYgRdu4f3JuG9IZqUa7ZyY1QQIkrMC3rC0WK5tNdDQgbEJY9MODc8CsoKx11tnjvSzHY4Prq3ZDHZk6GL5SIIESXmBd1ht47+botutxFcR/rIBN3lhI1PwrRzIMUzKGMkgu5dVJScY7ayuEgQIsooEHTL6G/O1dVsbJGEDIhPHr5w1uyC1mqY9dnefWHN0EXQBSGSxLygJ9itdHS70MO5qRcreFeJJowwQ6/dY7bZU3v3hSVDF0EXhGgg5gU93m5Fa+hyjWLbxbuoyJEO8SnDz9Dr9ppt5uTefeHI0JPEchGEaCDmBb1natFoLl3s6J+hD7M8sG6PqRn3ijiYNwkYZoYulosgRBNBCbpS6htKqa1KqS1KqaeUUo5+x+OVUk8rpXYrpdYopQoPR7D+SOgR9FHso3stF0f6yDz0un2QdUzffY5Usx1Whu6xXBLSwWIXQReECDOkoCulxgO3AsVa69mAFbiy32lfBOq11lOA3wO/DneggfCOoRvVgt6ToY+wbLF2D2T2E3SrHexJI8vQ7Ykje6MRBCEsBGu52IAEpZQNSAQO9jt+IeDpxcqzwBlKHZkuTUeF5dLnpmjS8ISzqw2aD/b1z7040obXQtfroccled5opA5dECLJkIKutS4H7gVKgQqgUWu9vN9p44EDnvO7gUYgq/+1lFI3KaXWKaXWVVdXjzR2oNdyGdUNutrrjaVhTzQ3RbvbwdUd2jXq95ltViBBH47l0gLWeLBYR+btC4IQFoKxXDIwGfgkIA9IUkpdPZwX01o/pLUu1loX5+TkDOcSA4g/WiyXhHTTmjYu2ewL1XbxliwGzNCHabnEJZmvh/vJQRCEsBGM5XImsE9rXa21dgLPA4v6nVMOFAB4bJk0oDacgfagtRnO4MFxtNwU9VajxA9T0P2VLHoZdobuI+jxYrkIQqQJRtBLgZOUUokeX/wMYHu/c14ErvN8fSnwtj5cK302PgEPLIRDJoQey2U0rxbtaDA3RKE3Qw81G/ZXsuhl2Bl6q7GBvHFJlYsgRJRgPPQ1mBudG4DNnu95SCl1t1LqAs9p/wCylFK7gW8C3z1M8cLUs8Fig03/AmB8RgJWi2Jz+QiGNEQ77fXGcgHjocMwMnQ/JYteRpSh+wi6WC6CEFGCqnLRWv9Ia12ktZ6ttb5Ga92ptf6h1vpFz/EOrfVlWuspWusTtNZ7D1vEyTkw5Uz4eBm4XaQ67CwozODtHYcO20tGHF/LpSdDD/EGZO0e/3YLDL8nurPNlDyCx3IRQReESBKbK0XnXmlK8PatAuCMojHsqGymrL4twoEdJrw3RWF4HnpPyeIgGfpweqJ3tfbN0EXQBSGixKagTzsX4tN6bJfTZ5gBCytHY5budkFH00APPZQbkN6SxcxJ/o8Pt5+Ls62vh+7qgu6u0K4hCELYiE1BtztMC9jtL0JnC5OzkyjMShydtktHI6B9qlw8Hnoolou3wmUwD73ntUKgf5ULSJYuCBEkNgUdYO5VJkPc8TJKKU4vGsN/99TS1hXigptox7cxFwyvDn2wGnQYQYbuW+WSFHpcgiCEldgV9AknQfpE2PQUAGfMyKWr2837uw9P+XvE8G3MBWBPAGUJraKkbm/gkkUYYYbuY7mA1KILQgSJXUFXytwc3fsuNJazoDCT5HgbK0ab7dI/Q1cK4lJCy4Tr9ga2W2B4gu7qBlenT5WL1wqSDF0QIkXsCjrAsVcAGjYvI85mYfHUbN7eUTW6phe1+3Ra9BJqZ8O6vYHtFhheT3TvtKK4/paL9HMRhEgR24KedQwUnGiqXbTm9KJcqpo62XqwKdKRhQ/faUVe4pKCF86uNmgqD1yyCMPrid7l0zoXxHIRhCggtgUdTJZevQMqNnHa9FyUYnRVu/S3XCC0VZn1JWYbqGQRhtcT3dsL3Svk8cNsSSAIQtiIfUGfdRGgYNfr5KTEMzc/fXT56O0NpkWtPaF3XyirMus8FS6DeegQek/0rv6Wi5QtCkKkiX1BT8yEvHmwZyUAZxTlsulAA9XNnb3nPH01vP69CAU4QnxXiXqJC2FQ9GBdFn0JtZ+LM5DlIoIuCJEi9gUdYPJSKFsLHY0DV402V8H2l2Dt36E1Bksa2+v73hAFT4YepIdeO0iXRV8caWZFarD0ZOiem6HDKacUBCGsjA5BP2YpaBeUrGbmuFQKsxL519pSc2zXa2br6oSPHo9cjMPFtzGXl1A89KEqXLw4UkeWoXuHb8hNUUGIGKND0AtONMKyZyVKKa5bVMiG0gY2HmiAna9B+gSYeAqs+4fpjRJL+LNcQvLQh6hB9xKq5eI7T9SLjKEThIgyOgTdFg8TT4a9xke/dH4+yfE2nnhvG+x9B6afByd8CRpKYfdbkY01VNob/WToKcE1wuopWQwmQw/VQ/dk4t4MHWQMnSBEmNEh6GBsl9rd0FBKisPOZcX5NG99C7o7YPq5UHQ+JI+FD/8W6UhDI1CGDkNn6T0liyEIerCLsnoydB9BlzF0ghBRRo+gT15qtp5ql+sXFbLUsp4Oa7LJ3q12mH+9ydDrDt/8jbDi6obOpoE3RYMdctGw32wzBqlB9+JIM/chghXkHg+9v+UiGbogRIrRI+i5M0wG7rFdJmY4ONe+kXfcc+lwe37M+debSox1D0cuzlDwWiD9LZf4IFdlNleabcrYoV8r1H4uXS1gjQOrrXefjKEThIgyegRdKWO77H3H3PgsX0+qu4FXO4/jxU0HzTmp42DG+fDR/4GzPaLhBoW/VaJgPHQYOhtu8ZRuJucO/VohC3pbX/8cZAydIESY0SPoYGyX9nqo2AQ7X0VbbJRnn8zDq/f1NuxacKM5Z8vz4X3tFT8Nvz/fv3Wul/ggLZeWSkjMMnbTUIQq6M62vhUuIJaLIESYUSbop5nt3pWw8zXUxEVcvng2Oyqb+d/eOnOs8BTIKYINj4bvdVtr4b/3wZq/hu+a0NuYa0CGHuRN0ZZDkDwmuNcKOUNvHZihS5WLIESU0SXoKWNgzGxjqVTvgOmf5sJ548lMiuO+t3bhdmtjzUw502Tx4apJ3/YCuLuh9hNoqwvPNcHHcvGzUhSGFs/myhAEPcQWuv4y9PgU6G6PvVp/QRgljC5BB5Ole6tYpp+Dw27lO+dMZ82+Ov6x2jMsOXeGKWf0lvWNlC3Pgc1hvi5bG55rgv/WuRAlGbo/y0XG0AlCJBl9gn6Mp3wxdxZkFAJweXEBZ80cwz1v7GTbwSbImWHOObR95K/XWA7734cTvwLKCgfWjPyaXgLeFA3CQ9caWqqCuyEKEB9iT3SnP8tFWugKQiQZfYI+YZHJaGdf1LNLKcWvLjmWtEQ7tz/9ER0ZU8yB6jAI+tbnAQ3HXwvjjoUDH478ml7aG8CWYFbC+mKLB4tt8Ey4o8H0rwmmZBHAFmcEOtgWur7zRL14x9DJ4iJBiAijT9DjEuG2jXDyN/rszkyK455Lj2VXVQu/ebsc0ibAoR3BXbOzBZ68Eso3DDy2+VkYN693elL5enA5w/CDYAS9f3YOvY2wBsuEe0oWg7RcILTl/862vouKQMbQCUKEGX2CDuYmou+CFw+nTc/luoUTefi/+6hLmmxunAbD/vdN18Znv9BXRGv3QMVGmHOpeV5wghG6qi1h+CHwLPvP8H8sfohB0S1VZnu4BL2rdWCGLmPoBCGijE5BH4Q7z5vBlNxk/nMwFXf1LrO8fijK1poVpvUl8Madvfs3PwsomHWxeZ5/gtkGY7u0N5ja9e7Owc/pf0PUS1zy4B5682EWdGeAhUUgHrogRIijTtAddiv/vH4BVY5JWNxdrHj/f0N/U9laGDMLTr4NNjwGO141Nx23PAsTF0HaeHNeWj6k5AUn6NtfhPfuhZL3Ap/jrzGXl6FWZfZk6EHeFIXgBd3tMlVC/hYWgVS5CEKEOOoEHaAgM5GvXXY+AMtee5M/rfikdyVpf9xu44vnL4Cld8HYOfDiLbBnBdTsgtmX9J6rlLFdghH0ys1mW7Ut8Dnt9UNk6IMJeqUppRxqUpEvwQp6l5/Wud6YQARdECLEUSnoACkFswC4MK+J3765i1v/tZGPSusHCnvNLtPxMH+BqQS5+G/G6vjX1abSZOZn+55fcCI0lkLTwcEDqPjYbA8FEHSt/Y+f8zJkhn7IZOdKDR6HL8EKutNP61zozdjFchGEiHDUCjpxSZA+kXPHNHD7mVN5fUsFF/3lfU7+1dv89OVtrN/vEXfvQqH8BWabOwM+9ROzInLyUkjK6nvdghPNdrAs3e3uvXFatdX/OfUlRjizpwaIf4hB0S1VofnnEHxP9J4MXSwXQYgmBpaCHE3kzkAd2s7tl03jhpMn8da2Kl7bUsHjH+znH6v3MWNcKvcnv8NkRzoq02eM2wlfNjcsp5418Jpj5xir48CHMOuzA48D1O8zopeYDdU7jSdtsfY9p2KT2ebN83+NoTL05qrgRs/54tsT3XuD0x+BMnSLxYh8LFS5NJbDx/+CU74Z2qcYQYhihszQlVLTlVIbfR5NSqnb+52TppR6SSm1SSm1VSl1w+ELOYzkFJkpRy4naQl2Lpmfz9+vW8D6H5zJLy+eg9ut6dq/hvc7CvntW5/Q1OGpL7dYYOmdkD9/4DVtcZB3/OArRr1iPecys/jH38CNik3G0smd6f8a3s6GgbLp4WboMLTt4m+eaE9cSUN3gYwG3v0VrLg7+NJVQYgBhhR0rfVOrfU8rfU8YD7QBvy732lfA7ZprecCpwG/VUrFhTvYsJM7A9xOU0/uQ4rDzlUnTOD1m+dSZCmjJn0u96/czfl/XM3msiA85oIFRpCdHf6PV242Yu29oerPdqnYaOLrv0rUS3yyaQjmr+yxuwva64JfJeolWEF3BrBcvHFFu+XS2QybnzNfh6P9gyBECaF66GcAe7TW+/vt10CKUkoByUAdEESBd4TJKTLbAC0A1MGPUGguPP8CnvnyQpwuN5c88D6Pvl8SuCoGjI/udhpR9kflx+a1x8429e39b4xqbd4QxgWwW2DwIRetIQy28CXkDD1x4LG4GJgruvnZ3jclEXRhFBGqoF8JPOVn//3ADOAgsBm4TWvt7n+SUuompdQ6pdS66urqkIMNO9nTABW4BYD3huj4+RQXZvLqrYs5ZWo2P3pxK199YgON7QGW+PcsMApgu1RuhrHHgj3BDHDun6E3lUNbLYybGzj2nooSP/bGcFaJQggZup95oj1xHaYxdI3l4bvW+kdM87bMY8LTz0cQooSgBd1joVwAPOPn8NnARiAPmAfcr5RK7X+S1vohrXWx1ro4JydnmCGHkbhE05Ex0H/qsnWQPb2ndDAjKY6/X1vMnecWsXxbFefct4rVn9QM/L7kHCPU/ipdmquM4I6dY57nzhyYoR/0ZPaDZejxg1SUDGeVKATfE92bgfvL0A+H5bL/ffj9TPP3GCkHPzKfnOZfbyytYPv5CEIMEEqGfi6wQWtd5efYDcDz2rAb2AcUhSPAw06g/9TekkVvuaIHi0Xx5VOP4bmbF5Fgt3L1P9bw4xe30t7Vb6jDhEVmFWh/j9u7oGjcsWY7ZhbU7etrU1RsMq14x84OHPdgrWqPWIYeyHIJs6DvfstswyHo6x81VUjHXm7eTOv2BL7XIQgxRiiCfhX+7RaAUoy/jlJqDDAd8FO6EYXkFJn/1N1dfffX7zO2R36x32+bV5DOK7cu5vpFhTzyfgmf/uN7LN9aSWun59bBrIuMMHrFyEulp8JljEesc2cCum+1RcUmyJluLJlAxA/ioXs7LSaF+Cko2J7oQ1a59IuprW7g7zcUSlab7aEANfvB0tli/PNZF5uWCrlFoN1m0pQgjAKCEnSlVBLwKeB5n31fUUp9xfP0p8AipdRmYAXwHa21Hy8iCsmd4Rkft7vvfm822C9D9yUhzsqPL5jFk186kc5uNzc9vp55dy/nyoc+4C8H8nElZMHHy/p+U+VmSJ/Y26NljFmx2qcFQMXGwf1zGHzIhXc4tC3EQiNvT/TOoQS9BSx2/8On41P6ftrobIb7F8A7vwwtlp7XajWtF2DkNzC3Pm9a+86/3jwP56ATQYgCglpYpLVuBbL67XvQ5+uDgJ9VNjGAb6XLGJ+a77K15qZf7owhL7FoSjZvf/tU1pfU8+4n1ZMQg5MAAB2dSURBVLy3q4bfLN9Dir2Yq3a8hq2jCRye7Lfi417/HIyHb0voFZXmSmOZDOafw+Aeeiij5/oTzPJ/p5/hFl7iknrr45Uy813banqtplA5sMa84WZNMb8jt9usAxgO6x8xf+8Cz03rrCmmfFQEXRglHL1L/71kT/OUDvbz0cvWwvjjB67gDEC8zcqiKdncee4MXr1tMf+78wz2jDsPm7uTpx//Cx1Ol8lW6/b2zb4tVvPR32sneBcdBZ2h+7spWhl6yaKXYAS9y89wiz5xaZNZu7rhg7+Y/fX7hhdPyWpzP2H+DeaNorF0eNep3Gwy/fnX964MtcUZUZfFRcIoQQTd7oCMSX0rXZztRgAGsVuGYmyagx98+Voa4seTV/oSlz74PlWfrAd03wwdTAmd13Kp2ASogef0ZygPPTnERUVeknKg4cDg5zj9DLfoictnyMX2/xgBzp0J9ftNi4NQKVkNecf1ZtXDyaa7O2H5D8AaD8de0fdY7ozADdIEIcYQQQfzn7pik/G7V/4CnrnBfMwfgaADWK0W0k/8HKfYttFaW87fnvkPABWJ0/qcp3OLoPUQ/7diHZ2l601DrsF6qYDxr63xAz30UIdD96fgBPO7GGz5fpef4RZefBt0vX+/qfU+4Uaz0KqxLLRYvP554Sm91legZmaBcHWbSVN7V8KnfwuJmX2P58wwbzbRvhhKEIJABB1MNtxQCs/fCO/+xmRsRefDpMUjv/acy1HazXOnVHB6eiV1OplTHtjB15/cwPKtlfzy1e18611TGfPKirdp2LuO9uxByhV98VfzHepw6P4ULjYNuvZ/EPgcZ5v/ChfoFfRdb8DBDbDo68bWAP89awbjwIfmjbVwsflEkj4htGza7YIXvgI7XoZzfg3HXzPwnNwZmCqjnX33dzbDg4th94rQYhaECHJ0d1v0svBrML4Y0gs8NykD9E8ZDjnTYNxcMvf+h0WJmo604/ni2Mk8taaUlz+uwG5VnFs4A8rhl/PqGbOthj/vTeWzDe2MTx+kbBH8r8ocznBoXwpONBUsJatgWoD73F2tAzNdL95PFv+9z1TazL0KWj0FT/X7gKXBx+L1zyd4WhLnzhx8IIgvWsPLt8PmZ+CMH8JJX/F/njfzr95h7pl42fGqadFQshqmnBF8zIIQQUTQwWR/U888fNefczksvwuUFcfCr/K9s2Zw6xlT2bC/nrkF6aQ5bHBPFoXlLwGwrmsiT/31A5668SQKMgNYG964+2fozZVmO1zLJS7RWE3e2m9/ONvAnh/g+z2C3lIFp91paulTxxt7KNQMvWS1aR/svV+QO9PU9Xd3DV2S+c4vzbjAxd+Gxd8KfF7GJLDGDcz8tzxrtqHaRIIQQcRyORLMvhhQxsoYa6pXkuNtLJmWQ1qC3VRd5M6ERnMz8lvXXEJTu5MrH/ofOyqbAl/X36rMngx9mJYLGKupYlPgapeuICwXmwMWfMl8bbFAxkSzIjZYfP1zL2NmedYMDLEQSGtTojjtXDj9+4Ofa7WZ9g6+VU6ttbDnbfN14xA3iAUhihBBPxKk5vX68YGqV7wLjDImMfuYiTx540m0dXVz7h/e4+tPbmBXlZ+blPH+LJdhDIfuT+Fis4Jy//v+jztbA98U9dbbz/scJGX37s+cHJqgH/jQ3Egt9LmP0XNjdAjbpXqH+T0UnRfc8Ircor6li9teMG8cY+ZIhi7EFCLoR4qTbzMTjgKNlPMOsvBMKJo9Po0V3zqNr5x6DCt3HOLs+1bxtSc29J176jdDrzT2RijDofuTv8BcY997/o93DbKwKDUPLvwLnP6DvvszJhkPfajxdl68/rl3pB9A1lTPQqAhBH3vu2Y76dTgXit3hsnEOzyfhrY8Z7L2aWeb2bCu6O8ELQggHvqRY8qZ5hEIb4bus6AoMymO75xTxE2LJ/P31Xt55L8lvLK5gvHpCZw3ZyxfUtnk1pegmit7q1paDkHKmJGNVbM7TPliyaqBx9wuM0810MIigOM+P3Bf5mTjvbdUBVeB4/XPHT5NO21xZiHYUIK+711zcztj4tCvA70tAKp3Quo42P9fWHqX+ZSjXdBcYW6YC0KUIxl6tDBunsni+y98wbTtvePsIt6/8wzuufRYpo9N4ZH3S7h8w0zcrm7WL/sFVU2ejoHDGT3nj0lLoHKLaazlS6B5okOROclsg7Fd/PnnXoaqdHF1mzeDYLNz6LVyDm2DLZ52RbMvgTTPjV+xXYQYQTL0aMFqg0/dPegpaQl2Lisu4LLiAhrbnazYXsWHb/6HWaXLWPyrJZxYVMi9NWV0p0/mYHkjKQ4bGUlxpDr8NNEaisLFgDbZ6ozP9O73dloM5KEHInOy2dbvg4kLBz+3ZPVA/9xL7gxTgeLbH8eXio3Q2QSTQxD09Inm56ne4flkcLwZsO1d2dp4ABgiZkGIAiRDj1HSEuxcfHw+C6/9KamqnT8cs54NpfV0N1byyl435/9pNafe8w5zf7KcO5/fTG2Ln9mjgzF+vhG5/j66d3RboCqXgAEXmJ45g5Uuam36lT9zPSTlwoSTBp7jtaYC9V/Z+47ZhpKhWyzGytnpqT2fc5kn5vFmK5UuQowggh7rjJsLx5zBaXXP8P7txWSqFk6dP5u/XjOf3142l2tPmsgz6w6w9N53eHj1PpwuMxmwvcvFhtJ6nvqwlA/31Q2ckWqLMzckS/oJ+nAzdFucEfVAlktbHSy7Fl661fSg//K7vfXnvnhvHgdqAbDvXdNr3rfCJhhyZ0J9CaBML3swb1qJWWK5CDGDWC6jgVO+AY+eT9z//gjAhAmTmDDL3Hi8ZH4+1yycyE9e2sbdL2/jsQ9KsFkt7K1uwe2j4ZOzk7h8QQGXHJ9PTopnpWzhKfD2T81KT69A9njoIWboYHx0fxn6wY/gqc9Ba7WxnRbeErhFblqBqe7x16TL2Q6la3rr30Mh19NGedJic2O05/Xyh25WJghRggj6aKDwFFNq+MGfzfN+N0Wn5Kbw2BdO4K3th/jru3tIT7Rz3pxxzMpLZfqYFNbtr+fptaX86rUd3PvGTj4zN487zp5O3qQl5gIl7/Vmrd4mVqFm6GB89K3/Hrh/xU9N3feX3jSdFQfDYgncIfHAGtPHJhT/3Euux8qZfWnf/WkFULsn9OsJQgQQQR8NKGWy9H99zjz3s6hIKcWnZo7hUzMHVsAUZidx6fx8dh9q4akPS/m//+3n1c0VfOWUCdxuT0Lt6xX0puZGUoGV+1rYtm83BxvaqWrqxOly0+1243SZtP/c2WO56oQJOOw+/eQzJkF7vXl4Bm/T0QT7VpleK0OJuZfcmbD9pd4hGl72vmvq1CcuCu46vhyz1NTPe/1zL2kFxpfv/1qCEIWIoI8Wpp1rpvFU7xj2sv8pucn84PyZ3HByIb9+fSd/eKeEExOmMe+jZ3l2dzwPtyzk2LYP+WMc/HR5KXt1N5lJceSmxOOwW7FZFFaLormjm5+8tI0H393D15dO4fIFBcTbrL2VLnX7YLxH0He/aSpapn86+EBzZ8KGRwfWtO971zRZ8+e9D4XF6r9+Pi3fLN7qaOh9ExKEKEUEfbRgsRj/+YP7R1yHnp+RyJ+uOo7rFxXyxAtfIKnuPq5t+AuXW/5JU/ZkaIKHbzqVMeOPISHO/0Sn9/fU8Lvlu/jBf7bywDt7uPj4fE5NT2MBGB/d29lwx6uQmN07wCIYvKMCq7b0Cnp7g/Hil9wx7J/bL7616CLoQpQjgj6amHa2eYSJ+RMzmH/btbjd18DBDTg+fAjH1ufBYqMwbxwEEHOARcdks/ArWazeXcOf3t7NA+/u4R/udrY74JFXVlJZNpvPF4+l4JM3YeZngh71B5h+OPZE+PdXzJvYsVeaenntDq1cMRi8K0QbDgw9RUoQIowIujAkFouC/PmQ/1c462fQVB6UraGUYvHUHBZPzaG1s5uNBxpoWZbNZMshfvreXra+9wKPxzXyccopzHJrWjq6qWntpKbZ1MwXF2ZitfjxrRMy4AuvwyvfhhduNp0VEzKNyI9wytQA0jyCLqWLQgwggi6ERnKOeYRIUryNk6dkw9hpLKGF1V9eStVTz9NeGc9lyx0433y1TxklQH5GAtecNJHLiwvISOrX/3zcXPjCG7DpSXjzR9C2Bo45Y+g+6SEHnmMalcniIiEGEEEXjiyZk2D3CsalOhjX9j7u6Wdy78wT2V7RRFZyPNnJcWQlxdPQ3sXjH+znl6/t4Hdv7uKsWWNxa01VYweVTR1UN3cSb7OQnjiefMf9XG57mbjMM/iUy43dGvp6Obdbs6+2lXibhdQEO8lxNvPJRCnjo4ugCzGACLpwZMmcZFr8ln4ATeVYTv8+n5mbx2fm5g049fxj89hR2cRjH+xn+dZKUhx2xqY6WFCYSW5KPJ3dburbumhoc/JA4xXsfK+ZSdtXcee5RXxq5hjUEGWG9a1drPqkmnd2VrNqVzW1rV09xywK0hPj+Oppx/DFtHyUWC5CDCCCLhxZMjxdFz/4s+ntMnXwm7hFY1P5xUVz+MVFg9+Q1Fqzcuchfv7Kdm56fD0nTsrkgnl5NHd009jupLHdSUNbF7UtXdS2dlHneYBpU7xkajaLjskGBU3tTpranWwsa+Rnr2xnXl4y87t2IlXoQrQjgi4cWby16DtegYknQ1JWWC6rlOL0ojEsnprDvz4s5fdvfcJd/94CgM2iSEuwk55oJys5nqm5yWQlxzE21cHJU7I5Nj/d781Xt1vzmzd28t5qB8X2SlpaW0lOGkbLA0E4QoigC0cWb190tBkRF2bsVgvXLCzksuIC6lq7SEuwkxhnHdJ+8YfFovjuuUX8r20ubH6OW/76KuefupDmDieN7Sbzz0t3cOn8fNITw3wzVhCGgQi6cGRJyDCP9nqYHn5B9+KwW8lLTwjLtU46bh5sBhpL+dYzvT1skuKstHa5uOeNnXx23niuXTSRWXlptHR2s7e6hd2HWqhu7mR8RgITM5OYkJVohoKHQGe3C4tSw7rRKxx9iKALR57saWa4dU+2HuV4Vove/+kcDk0+jbQEO6kOGzarhe0V5qbtvz8q4+l1B8hOjqOmpSvwpTyfGGxWI9JxVgspDhvpiXFkJNrJSIyjqcPJ/to29te2cbCxnUS7ldOKcjlr5hhOm55LWoIdrTW1rV0cqGujvq2L8emJTMhMDLhy10uH08XWg010Ol0kO2wkx9tIcdjJSLRjG2VvGv/+qIz3dtVw3pxxLC3K9b+mYZShBvTBPkIUFxfrdevWReS1hQhT84m5IZp1TKQjCY7uTvhZLpz2PTjtO35PaWxz8sz6A+yobGZSdhLH5CQzJTeJnBQHBxvaPQLdSnlDO51ON06Xmy6Xm85uN02em7b1bV3UtzlJibcxISuRiZmJTMhKorq5kze3VVHT0onNopiQlUhlYwdtXa4BcYxJjWdiZhI5qfHkJMeTlRRHelIce6tb2FDawLaDjT0N1HyJs1mYPiaFWXmpzMpLZXxGAk3t3T1VRA2e2OrbzM3kti4XJ03O4uLjx1M8MSOgpeVya9qdLtq6uqls7GBHZTM7KprZWdVEY7uTGWNTmZOfxqy8NKbkJtPW1U1daxf1rd7fR+/XTR1Ojh2fxgXzxpPZf12CD21d3Xz/hS08v6GceJuFzm43eWkOrlgwgcuK8xmX5ugTb1e3m20VTWwsrWfLwSbmjE/j8uKCQd8c61u7WLe/nnX762hodXLJ/HwWFAb+PYQTpdR6rXWx32Mi6IIQBPdOg6lnwYX3R+Tl3W7NRwcaWL61kpLaVsanJ1KQmUBBRiIZSXbKGzoorW2lpLaN0ro2apo7qW7ppLmjGwCH3cKx+ekcNyGd4woySE+009LRTXOnk+aObsrq29l6sJGtB5toaHMOeP1Uh43MpDgykuLISIzDohSrd1fT4XRTkJnAhXPHE2ezsL+2jdK6VvbXttHQ7qSr2z3gWg67hWljUkh12NlW0dRTbTQYKfE2EuOtVDV1Yrcqlk7P5dL5+ZwyNZvEuF6jYWdlM199Yj17a1q55fSpfPW0Y3hn5yGeWFPKe5/UAGC1KFIdNtIS7DjsVvbWtPbEmZZgp7HdSUainesWFXLdwkLSE+2U1rWxtqSe9fvrWFtSz+5DLQDYrYp4m5WWzm5mjkvl+kWFXDAvj/YuFyW1rZTUtnKgrp3ObhduDW6t0RoWTs5iadHArqjBIIIuCCPlb6dDfCpc+0Lgc3a8Crteg6V39e0CGUE6nC4a2pxkJccF5cNrralo7KCqqYP0xDjSE+ykJtj92hUtnd28saWSf39Uzn/31KC15xNCVhITMxPJSo4nwW4lMc6KI85KdlIcReNSmZCZ2HM97+ttLm+kpKaV1AR7j/XkffNIT7T3xL69oonn1pfxwsbyHmsr1WEjLz2BMakO1uyrJTnezh+unGdWJvtQUtPKW9urqGvtorHdSVNHN62d3UzJTWZegXmzG5vqYN3+ev767h7e2n6IBLuVZIeNak87ihSHjfkTM1hQmMmCwkyOzU9Da3hhYzmPvl/CjspmbBZFd79lz1aLwqoUSoFFKW5cPIlvnjU99D8oIuiCMHKWXWe6O96y3v/xmt3w1yVm5qojDc75Fcy9Kvw91BvLTKOwoQZtH2Ea25zE2y19+98fRpwuN6s/qWF7ZRMVDR1UNHZQ2dROfnoid392FrkpjhG/xq6qZv753xI6nK4eEZ+am2xWEPtBa83/9tbx9o4qxqQ6KMxKojA7kYLMRNM+OkyMSNCVUtOBp312TQZ+qLW+r995pwH3AXagRms9aNs7EXQhpnjjLlj7d7ircqBId3fBPz4FDfvh8sdg5S/MStipZ8H59/UOm+5PzSemh3vhEsiZNvjru92w/mFY/kMzBvDq52DKGeH52YSYYjBBH7LKRWu9E5jnuZAVKAf6zBFTSqUDfwHO0VqXKqWGZw4JQrSSVgDdHWa+av/mZG/fDRUb4YonYNISmHgKfPgQrPgJ/PE403Y3b56ZyJQ+0Uxo2v4SVHvmolrscPJtsOTbYPdTalm/H178uvm+yUuhuRKevxG+/F7gN4sjTWstOFLBGlpZphBeQi1bPAPYo7Xe32//54DntdalAFrrQ+EIThCiBm9f9MYDfQV991vw/p+g+Isw43yzz2IxI/WmnQVr/2EGb2x62mT4YCp8Jp4Mxb8x4/I++DO8dy9seRY+/VuYsBCqd5rpU1VbYd0/zaeC8++D+ddD7W546DR49ga4/pWBItpcZbpEBhq0PRRag9sF1iHkob0etr4AHz9tPpEkZEDRp2HmReaNLdydL4UhCclDV0o9DGzQWt/fb7/XapkFpAB/0Fo/5uf7bwJuApgwYcL8/fv7vy8IQpRSscl45Jc/DjMvMPtaDsEDJ0NiFty00n927cXthro9ZuD0+PkDs/x9q+Dlb0LtJ333W+NMVv7peyF9Qu/+Lc/Bs1+AhV+Hs3/uifFjeOvHsGcFpObD7Itg9iUwbp55Q+hoMm8Uh7aZkXpuF2iXia29HupLjG1Uvx9cXTB2thnpN36+sYRaa8wbWmOZuc7ut8x5WVNh9sXm+3e+Bp1N5j5C5jG919cuc1M5twhyZphtqme8X2ezeXS1mmHh2tUbm7MdutrMvQlnB8QnQ1Ku+f0leYyA9joTf1udiccaB7Z4s3W7oKkMGstN3G01ppe/d4GbI90MV9Ea0D5bt3m43ebvmpRj2lQk5YA9ybyOqxNcTvPo/73ODuhuN/E72z3ndXkeTvNmP/uSYf1TDMtNUaVUHHAQmKW1rup37H6gGJPBJwAfAJ/WWu8KdD3x0IWYoq0OfjMJTrvTzDTd/RZ8stwIyY0re8fijYTuTjOso6MJcqZD7gzTzCxQpvzqHcbaOfceKPsQNj9jBGrBF01mv3uFmdeaMckIW2Np4NeOSzZ2UEYhZEw0w7YPfmQeXS19z7XYzGKraefAsVcYK8l7X6G7E/ashO0vmpmvymoEU1nM7+rQNrMNFYsNbAlG2PXAUsjBv9durKnUfEjKNm8c3mHlHQ2e63niV8rE6vvoaoGOxtBj9mJzmJ76Vrt5k7HazCe6U24f1uVG5KH7cC4mO6/yc6wMqNVatwKtSqlVwFwgoKALQkyRkGEys3d+aZ7HpcDkU2HBl8Ij5mCyyhO/HPz5Z/0MytbBa3cYsTvlm8aLT0g3x9vqjLDueNVkpfOvM29GuUUmu7VY+wquv4oct8tk43V7zPDxtHxIzg08MtAWD9PPMQ9/aG0+2VRvN9ZQfLKJLT7FvKn0iclqsmN7Yq9943ZBW625RushQEFipifjzjTi6eo0byyuLvNzJWYP337y0t1lXretxnxisMV5RNoj0Hh65+N5Q7AnmIfNEf5Kp0EIJUP/F/CG1vqffo7NAO4HzgbigA+BK7XWWwJdTzJ0Ieb48G/mhuSUM8you2i4Adh0EDY+AfM+D6kDe8oLo48RZ+hKqSTgU8CXffZ9BUBr/aDWertS6nXgY8AN/H0wMReEmOSEGyMdwUBS82DJHZGOQogSghJ0j5WS1W/fg/2e3wPcE77QBEEQhFAYXe3VBEEQjmJE0AVBEEYJIuiCIAijBBF0QRCEUYIIuiAIwihBBF0QBGGUIIIuCIIwSojYgAulVDUw3O5c2UBNGMM5XEic4SMWYgSJM9zEQpxHOsaJWuscfwciJugjQSm1LtDS12hC4gwfsRAjSJzhJhbijKYYxXIRBEEYJYigC4IgjBJiVdAfinQAQSJxho9YiBEkznATC3FGTYwx6aELgiAIA4nVDF0QBEHohwi6IAjCKCHmBF0pdY5SaqdSardS6ruRjseLUuphpdQhpdQWn32ZSqk3lVKfeLYZEY6xQCm1Uim1TSm1VSl1W5TG6VBKfaiU2uSJ8yee/ZOUUms8f/unPXNuI4pSyqqU+kgp9XIUx1iilNqslNqolFrn2RdVf3NPTOlKqWeVUjuUUtuVUgujLU6l1HTP79H7aFJK3R4tccaUoCulrMCfMfNNZwJXKaXCNNBxxDwC9B+k+F1ghdZ6KrDC8zySdAPf0lrPBE4Cvub5/UVbnJ3A6VrrucA84Byl1EnAr4Hfa62nAPXAFyMYo5fbgO0+z6MxRoClWut5PvXS0fY3B/gD8LrWuggzk3g7URan1nqn5/c4D5gPtAH/Jlri1FrHzANYiJlr6n1+J3BnpOPyiacQ2OLzfCcwzvP1OGBnpGPsF+9/MKMFozZOIBHYAJyIWY1n8/dvIUKx5WP+854OvIwZHR9VMXriKAGy++2Lqr85kAbsw1OoEa1x9ovtLOC/0RRnTGXowHjggM/zMs++aGWM1rrC83UlMCaSwfiilCoEjgPWEIVxeqyMjcAh4E1gD9Cgte72nBINf/v7gP+HmaMLZkxjtMUIoIHlSqn1SqmbPPui7W8+CagG/umxsP7umWUcbXH6ciXwlOfrqIgz1gQ9ZtHmrTsqakSVUsnAc8DtWusm32PREqfW2qXNx9p84ASgKMIh9UEpdT5wSGu9PtKxBMEpWuvjMVbl15RSS3wPRsnf3AYcDzygtT4OaKWfbRElcQLguTdyAfBM/2ORjDPWBL0cKPB5nu/ZF61UKaXGAXi2hyIcD0opO0bMn9BaP+/ZHXVxetFaNwArMfZFulLKO9g80n/7k4ELlFIlwL8wtssfiK4YAdBal3u2hzB+7wlE39+8DCjTWq/xPH8WI/DRFqeXc4ENWusqz/OoiDPWBH0tMNVTSRCH+cjzYoRjGowXges8X1+H8awjhlJKAf8Atmutf+dzKNrizFFKpXu+TsD4/Nsxwn6p57SIxqm1vlNrna+1LsT8O3xba/15oihGAKVUklIqxfs1xvfdQpT9zbXWlcABpdR0z64zgG1EWZw+XEWv3QLREmekbywM40bEecAujKd6V6Tj8YnrKaACcGKyjS9iPNUVwCfAW0BmhGM8BfNR8GNgo+dxXhTGeSzwkSfOLcAPPfsnAx8CuzEfdeMj/Xf3xHUa8HI0xuiJZ5PnsdX7fyba/uaemOYB6zx/9xeAjCiNMwmoBdJ89kVFnLL0XxAEYZQQa5aLIAiCEAARdEEQhFGCCLogCMIoQQRdEARhlCCCLgiCMEoQQRcEQRgliKALgiCMEv4/a6UXvwkEN1MAAAAASUVORK5CYII=\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["loss =  7.623472690582275 , val_loss =  7.595399379730225\n","\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r257/257 [==============================] - 362s 1s/step - loss: 7.6235 - dense_1860_loss: 0.6516 - dense_1863_loss: 0.6144 - dense_1866_loss: 0.6800 - dense_1869_loss: 0.6340 - dense_1872_loss: 0.6232 - dense_1875_loss: 0.6796 - dense_1878_loss: 0.6183 - dense_1881_loss: 0.5921 - dense_1884_loss: 0.6770 - dense_1887_loss: 0.6867 - dense_1890_loss: 0.5582 - dense_1893_loss: 0.6084 - dense_1860_accuracy: 0.5946 - dense_1863_accuracy: 0.6668 - dense_1866_accuracy: 0.5597 - dense_1869_accuracy: 0.6330 - dense_1872_accuracy: 0.6405 - dense_1875_accuracy: 0.5707 - dense_1878_accuracy: 0.6753 - dense_1881_accuracy: 0.7142 - dense_1884_accuracy: 0.5722 - dense_1887_accuracy: 0.5401 - dense_1890_accuracy: 0.7249 - dense_1893_accuracy: 0.6738 - val_loss: 7.5954 - val_dense_1860_loss: 0.6707 - val_dense_1863_loss: 0.5968 - val_dense_1866_loss: 0.6848 - val_dense_1869_loss: 0.6297 - val_dense_1872_loss: 0.6061 - val_dense_1875_loss: 0.6638 - val_dense_1878_loss: 0.6088 - val_dense_1881_loss: 0.5458 - val_dense_1884_loss: 0.6940 - val_dense_1887_loss: 0.6855 - val_dense_1890_loss: 0.5804 - val_dense_1893_loss: 0.6290 - val_dense_1860_accuracy: 0.5734 - val_dense_1863_accuracy: 0.7165 - val_dense_1866_accuracy: 0.5738 - val_dense_1869_accuracy: 0.6449 - val_dense_1872_accuracy: 0.6656 - val_dense_1875_accuracy: 0.6357 - val_dense_1878_accuracy: 0.6885 - val_dense_1881_accuracy: 0.7664 - val_dense_1884_accuracy: 0.5444 - val_dense_1887_accuracy: 0.5646 - val_dense_1890_accuracy: 0.7072 - val_dense_1893_accuracy: 0.6355 - lr: 1.6000e-06\n","Epoch 75/100\n","257/257 [==============================] - ETA: 0s - loss: 7.6276 - dense_1860_loss: 0.6519 - dense_1863_loss: 0.6148 - dense_1866_loss: 0.6800 - dense_1869_loss: 0.6337 - dense_1872_loss: 0.6229 - dense_1875_loss: 0.6803 - dense_1878_loss: 0.6182 - dense_1881_loss: 0.5933 - dense_1884_loss: 0.6786 - dense_1887_loss: 0.6865 - dense_1890_loss: 0.5594 - dense_1893_loss: 0.6079 - dense_1860_accuracy: 0.5942 - dense_1863_accuracy: 0.6666 - dense_1866_accuracy: 0.5639 - dense_1869_accuracy: 0.6319 - dense_1872_accuracy: 0.6369 - dense_1875_accuracy: 0.5704 - dense_1878_accuracy: 0.6753 - dense_1881_accuracy: 0.7147 - dense_1884_accuracy: 0.5671 - dense_1887_accuracy: 0.5372 - dense_1890_accuracy: 0.7252 - dense_1893_accuracy: 0.6733"]},{"ename":"KeyboardInterrupt","evalue":"ignored","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-283-8e89ad069d8c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mhistory\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_generator\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mvalidation_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvalid_generator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepochs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mverbose\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcallbacks\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcallbacks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     62\u001b[0m     \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     63\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 64\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     65\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# pylint: disable=broad-except\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     66\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_batch_size, validation_freq, max_queue_size, workers, use_multiprocessing)\u001b[0m\n\u001b[1;32m   1429\u001b[0m               \u001b[0muse_multiprocessing\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0muse_multiprocessing\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1430\u001b[0m               \u001b[0mreturn_dict\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1431\u001b[0;31m               _use_cached_eval_dataset=True)\n\u001b[0m\u001b[1;32m   1432\u001b[0m           \u001b[0mval_logs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m'val_'\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mval\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mval\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mval_logs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1433\u001b[0m           \u001b[0mepoch_logs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mval_logs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     62\u001b[0m     \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     63\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 64\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     65\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# pylint: disable=broad-except\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     66\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\u001b[0m in \u001b[0;36mevaluate\u001b[0;34m(self, x, y, batch_size, verbose, sample_weight, steps, callbacks, max_queue_size, workers, use_multiprocessing, return_dict, **kwargs)\u001b[0m\n\u001b[1;32m   1714\u001b[0m             \u001b[0;32mwith\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprofiler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexperimental\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTrace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'test'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstep_num\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_r\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1715\u001b[0m               \u001b[0mcallbacks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_test_batch_begin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1716\u001b[0;31m               \u001b[0mtmp_logs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtest_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1717\u001b[0m               \u001b[0;32mif\u001b[0m \u001b[0mdata_handler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshould_sync\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1718\u001b[0m                 \u001b[0mcontext\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masync_wait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/util/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    148\u001b[0m     \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    149\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 150\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    151\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    152\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    913\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    914\u001b[0m       \u001b[0;32mwith\u001b[0m \u001b[0mOptionalXlaContext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jit_compile\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 915\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    916\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    917\u001b[0m       \u001b[0mnew_tracing_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexperimental_get_tracing_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m_call\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    952\u001b[0m       \u001b[0;31m# In this case we have not created variables on the first call. So we can\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    953\u001b[0m       \u001b[0;31m# run the first trace but we should fail if variables are created.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 954\u001b[0;31m       \u001b[0mresults\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_stateful_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    955\u001b[0m       \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_created_variables\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mALLOW_DYNAMIC_VARIABLE_CREATION\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    956\u001b[0m         raise ValueError(\"Creating variables on a non-first call to a function\"\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   2955\u001b[0m        filtered_flat_args) = self._maybe_define_function(args, kwargs)\n\u001b[1;32m   2956\u001b[0m     return graph_function._call_flat(\n\u001b[0;32m-> 2957\u001b[0;31m         filtered_flat_args, captured_inputs=graph_function.captured_inputs)  # pylint: disable=protected-access\n\u001b[0m\u001b[1;32m   2958\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2959\u001b[0m   \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m_call_flat\u001b[0;34m(self, args, captured_inputs, cancellation_manager)\u001b[0m\n\u001b[1;32m   1852\u001b[0m       \u001b[0;31m# No tape is watching; skip to running the function.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1853\u001b[0m       return self._build_call_outputs(self._inference_function.call(\n\u001b[0;32m-> 1854\u001b[0;31m           ctx, args, cancellation_manager=cancellation_manager))\n\u001b[0m\u001b[1;32m   1855\u001b[0m     forward_backward = self._select_forward_and_backward_functions(\n\u001b[1;32m   1856\u001b[0m         \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36mcall\u001b[0;34m(self, ctx, args, cancellation_manager)\u001b[0m\n\u001b[1;32m    502\u001b[0m               \u001b[0minputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    503\u001b[0m               \u001b[0mattrs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mattrs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 504\u001b[0;31m               ctx=ctx)\n\u001b[0m\u001b[1;32m    505\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    506\u001b[0m           outputs = execute.execute_with_cancellation(\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/execute.py\u001b[0m in \u001b[0;36mquick_execute\u001b[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001b[0m\n\u001b[1;32m     53\u001b[0m     \u001b[0mctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mensure_initialized\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     54\u001b[0m     tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n\u001b[0;32m---> 55\u001b[0;31m                                         inputs, attrs, num_outputs)\n\u001b[0m\u001b[1;32m     56\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_NotOkStatusException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     57\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mname\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}],"source":["# efficientnetb0 + 224,224,3 + randomshuffle + random_aug + reduce_lr + multihead \n","history = model.fit(train_generator,validation_data = valid_generator, epochs=100,verbose=1,callbacks=callbacks)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"iUi69BrvPvTu"},"outputs":[],"source":["# copy from https://gist.github.com/stared/dfb4dfaf6d9a8501cd1cc8b8cb806d2e\n","# loss 실시간 출력 \n","from IPython.display import clear_output\n","from tensorflow.keras.callbacks import Callback\n","\n","class PlotLosses(Callback):\n","\n","  def on_train_begin(self, logs={}):\n","    self.epochs = []\n","    self.losses = []\n","    self.val_losses = []\n","    self.logs = []\n","    self.fig = plt.figure()\n","\n","\n","  def on_epoch_end(self, epoch, logs={}):\n","\n","    self.epochs.append(epoch)\n","    self.losses.append(logs.get('loss'))\n","    self.val_losses.append(logs.get('val_loss'))\n","\n","    clear_output(wait=True)\n","    plt.plot(self.epochs, self.losses, label=\"loss\")\n","    plt.plot(self.epochs, self.val_losses, label=\"val_loss\")\n","    plt.legend()\n","    plt.show();\n","    print(\"loss = \", self.losses[-1], \", val_loss = \", self.val_losses[-1])\n","\n","#call backs 선언\n","plot_losses = PlotLosses()\n","\n","from tensorflow.keras.callbacks import ModelCheckpoint #<- model 저장 객체, best_model.h5라는 모델 이 저장 됨 \n","model_check_point = ModelCheckpoint(\n","    'best_model.h5', \n","    monitor='val_loss', \n","    verbose=1, \n","    save_best_only=True)\n","\n","\n","from tensorflow.keras.callbacks import EarlyStopping\n","early_stopping = EarlyStopping(\n","    monitor='val_loss',  # 모니터링 대상, 이걸 기준으로 멈춤 \n","    verbose=1,\n","    patience=50)         # 중지까지의 여유분\n","\n","from tensorflow.keras.callbacks import ReduceLROnPlateau\n","reduce_lr = ReduceLROnPlateau(\n","    monitor='val_loss', # 모니터링 대상\n","    patience=10,        # 대상ㅃ 기간동안 유지\n","    factor=0.2,         # 줄이는 양                              \n","    min_learning_rate=0.00001)     # 최소 학습율\n","\n","callbacks = [ plot_losses,reduce_lr]"]},{"cell_type":"markdown","metadata":{"id":"YrKmVZ3ErIyF"},"source":["#예측 및 평가 -> voting "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"GPJ6DeFKxQh1"},"outputs":[],"source":["y_ = model.predict(test_generator)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"lj9IUxcTxy4M"},"outputs":[],"source":["for i in range(12):\n","  exec(f'predicted_{i} = np.argmax(y_[{i}],axis=1)')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"abplTWCSyT37"},"outputs":[],"source":["target_0 = np.array(csvs[output_columns][valid:])[:,0]\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mVYwKRL5yu2A"},"outputs":[],"source":["temp = pd.DataFrame([predicted_0,predicted_1,predicted_2,predicted_3,predicted_4,predicted_5,predicted_6,predicted_7,predicted_8,predicted_9,predicted_10,predicted_11]).T\n","temp['index']=0"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"uFLp5gKj0J2h"},"outputs":[],"source":["for i in range(321):\n","  temp['index'].iloc[i*17:(i+1)*17] = i "]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":514,"status":"ok","timestamp":1645238372631,"user":{"displayName":"­임훈","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"},"user_tz":-540},"id":"VKwBNeo51t_a","outputId":"b43d48bd-8101-403c-a263-4eaa740edaa2"},"outputs":[{"data":{"text/plain":["0"]},"execution_count":460,"metadata":{},"output_type":"execute_result"}],"source":["round(np.mean(temp[temp['index']==0][0]))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"X6G9s42u2l5b"},"outputs":[],"source":["temp[temp['index']==0]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":383,"status":"ok","timestamp":1645238567463,"user":{"displayName":"­임훈","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"},"user_tz":-540},"id":"8Cy6sMSW2tww","outputId":"84a1109f-921a-4bd5-b002-0cd2c89f1411"},"outputs":[{"data":{"text/plain":["array([0., 0., 0., 1., 0., 0., 0., 1., 0., 1., 0., 0.])"]},"execution_count":476,"metadata":{},"output_type":"execute_result"}],"source":["np.round(np.mean(np.array(temp[temp['index']==0]),axis=0))[:-1]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ZQgVlP_O2LRc"},"outputs":[],"source":["predicted_y = pd.DataFrame(np.zeros(321*12).reshape(321,12))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"1miX5gl-2_YR"},"outputs":[],"source":["for i in range(321):\n","  predicted_y.iloc[i,:] = np.round(np.mean(np.array(temp[temp['index']==i]),axis=0))[:-1]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3q8edMHT3I6Z"},"outputs":[],"source":["predicted_y"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4PqAh7Ag3haj"},"outputs":[],"source":["test_y = csvs[valid:]\n","test_y = test_y.reset_index().drop(columns = 'index')\n","test_y.drop_duplicates(['성명'],keep='first')\n","test_y = np.array(test_y[output_columns])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-eCOzifk344h"},"outputs":[],"source":[""]},{"cell_type":"code","execution_count":null,"metadata":{"id":"AN7CeZm24oNn"},"outputs":[],"source":["from sklearn.metrics import precision_recall_fscore_support, classification_report,accuracy_score"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":394,"status":"ok","timestamp":1645239586384,"user":{"displayName":"­임훈","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"},"user_tz":-540},"id":"HxPmZnLU6kMI","outputId":"2d363f4b-5503-40cc-f7b1-5585bf2a067a"},"outputs":[{"name":"stdout","output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","           0       0.69      0.53      0.60       174\n","           1       0.54      0.35      0.42       130\n","           2       0.59      0.22      0.32       169\n","           3       0.57      0.55      0.56       164\n","           4       0.58      0.42      0.49       154\n","           5       0.58      0.54      0.56       158\n","           6       0.63      0.17      0.26       133\n","           7       0.74      0.86      0.80       235\n","           8       0.66      0.59      0.63       190\n","           9       0.61      0.62      0.61       165\n","          10       0.67      0.06      0.12       124\n","          11       0.71      0.32      0.44       111\n","\n","   micro avg       0.64      0.47      0.54      1907\n","   macro avg       0.63      0.44      0.48      1907\n","weighted avg       0.63      0.47      0.51      1907\n"," samples avg       0.61      0.48      0.47      1907\n","\n"]}],"source":["print(classification_report(test_y,np.array(predicted_y),target_names = ['0','1','2','3','4','5','6','7','8','9','10','11']))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":143},"executionInfo":{"elapsed":9,"status":"ok","timestamp":1645239442808,"user":{"displayName":"­임훈","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"},"user_tz":-540},"id":"3ih8lTgf58BG","outputId":"b64d1e26-338a-4106-fd85-241437ca7c71"},"outputs":[{"data":{"text/html":["\n","  <div id=\"df-9421066c-cef7-422f-86f4-dbbcb5274924\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","      <th>4</th>\n","      <th>5</th>\n","      <th>6</th>\n","      <th>7</th>\n","      <th>8</th>\n","      <th>9</th>\n","      <th>10</th>\n","      <th>11</th>\n","      <th>average</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>precision</th>\n","      <td>0.686567</td>\n","      <td>0.535714</td>\n","      <td>0.587302</td>\n","      <td>0.573248</td>\n","      <td>0.580357</td>\n","      <td>0.582192</td>\n","      <td>0.628571</td>\n","      <td>0.743590</td>\n","      <td>0.660819</td>\n","      <td>0.605882</td>\n","      <td>0.666667</td>\n","      <td>0.705882</td>\n","      <td>0.581292</td>\n","    </tr>\n","    <tr>\n","      <th>recall</th>\n","      <td>0.528736</td>\n","      <td>0.346154</td>\n","      <td>0.218935</td>\n","      <td>0.548780</td>\n","      <td>0.422078</td>\n","      <td>0.537975</td>\n","      <td>0.165414</td>\n","      <td>0.863830</td>\n","      <td>0.594737</td>\n","      <td>0.624242</td>\n","      <td>0.064516</td>\n","      <td>0.324324</td>\n","      <td>0.403055</td>\n","    </tr>\n","    <tr>\n","      <th>f1score</th>\n","      <td>0.597403</td>\n","      <td>0.420561</td>\n","      <td>0.318966</td>\n","      <td>0.560748</td>\n","      <td>0.488722</td>\n","      <td>0.559211</td>\n","      <td>0.261905</td>\n","      <td>0.799213</td>\n","      <td>0.626039</td>\n","      <td>0.614925</td>\n","      <td>0.117647</td>\n","      <td>0.444444</td>\n","      <td>0.446906</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9421066c-cef7-422f-86f4-dbbcb5274924')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-9421066c-cef7-422f-86f4-dbbcb5274924 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-9421066c-cef7-422f-86f4-dbbcb5274924');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["                  0         1         2  ...        10        11   average\n","precision  0.686567  0.535714  0.587302  ...  0.666667  0.705882  0.581292\n","recall     0.528736  0.346154  0.218935  ...  0.064516  0.324324  0.403055\n","f1score    0.597403  0.420561  0.318966  ...  0.117647  0.444444  0.446906\n","\n","[3 rows x 13 columns]"]},"execution_count":555,"metadata":{},"output_type":"execute_result"}],"source":["score = precision_recall_fscore_support(test_y,np.array(predicted_y))\n","score = pd.DataFrame([score[0],score[1],score[2]])\n","score.index = ['precision','recall','f1score']\n","score['average']=0\n","for i in range(3):\n","  score['average'].iloc[i] = np.mean(np.array(score)[i,:])\n","score"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":410,"status":"ok","timestamp":1645239773357,"user":{"displayName":"­임훈","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"},"user_tz":-540},"id":"x1GSGzuF7QNY","outputId":"37b31018-2a97-40ec-f98c-4c2f2f38753e"},"outputs":[{"name":"stdout","output_type":"stream","text":["accuracy = 0.6061786085150571\n"]}],"source":["acc = accuracy_score(test_y.reshape(321*12,),np.array(predicted_y).reshape(-1,))\n","print(f'accuracy = {acc}')"]}],"metadata":{"accelerator":"GPU","colab":{"background_execution":"on","collapsed_sections":[],"machine_shape":"hm","name":"22.02.21_model2","provenance":[{"file_id":"1xGWMOsYCN90xmS3KtM7wbaByI6l9-ktm","timestamp":1645359842207},{"file_id":"1pZwwDcy03Jj_dM6dOU7Gi59mctIiJPVo","timestamp":1645266574968},{"file_id":"18tastMh4sxkdMSRQ3ShsNVmFNnRdzc2e","timestamp":1644885200151}],"mount_file_id":"1gtLMFwSiEGNVGDMRi4w_1mTxMMqWLiS4","authorship_tag":"ABX9TyO80WSju3qnctEClAOP9nbi"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}