{"cells":[{"cell_type":"markdown","metadata":{"id":"I_iELta4J5NT"},"source":["# 디렉토리 설정 "]},{"cell_type":"markdown","source":[""],"metadata":{"id":"IYLfQA3WvHfW"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"25gmHRCYEzmf"},"outputs":[],"source":["!unzip /content/drive/MyDrive/DataSet/KYR_B_imaging.zip\n","!cp '/content/drive/MyDrive/Colab Notebooks/CT분류프로젝트/Custom_Py/init.py' ./"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3T5U1_vVWqS8"},"outputs":[],"source":["!cp -r '/content/KYR_B_imaging/20201224 DL_MRI_SNSB_임승욱/swr3' '/content/KYR_B_imaging' \n","!cp -r '/content/KYR_B_imaging/20201224 DL_MRI_SNSB_임승욱/swr2 74' '/content/KYR_B_imaging' \n","!cp -r '/content/KYR_B_imaging/20201224 DL_MRI_SNSB_임승욱/swr5' '/content/KYR_B_imaging' \n","!cp -r '/content/KYR_B_imaging/20201224 DL_MRI_SNSB_임승욱/swr1' '/content/KYR_B_imaging' \n","!cp -r '/content/KYR_B_imaging/20201224 DL_MRI_SNSB_임승욱/swr7' '/content/KYR_B_imaging' \n","!cp -r '/content/KYR_B_imaging/20201224 DL_MRI_SNSB_임승욱/swr8' '/content/KYR_B_imaging' \n","!cp -r '/content/KYR_B_imaging/20201224 DL_MRI_SNSB_임승욱/swr4' '/content/KYR_B_imaging' \n","!cp -r '/content/KYR_B_imaging/20201224 DL_MRI_SNSB_임승욱/nswr1' '/content/KYR_B_imaging' \n","!cp -r '/content/KYR_B_imaging/20201224 DL_MRI_SNSB_임승욱/swr6' '/content/KYR_B_imaging' \n","!rm -r '/content/KYR_B_imaging/20201224 DL_MRI_SNSB_임승욱'"]},{"cell_type":"markdown","metadata":{"id":"zcZ1__VY3jdO"},"source":["# 초기작업"]},{"cell_type":"markdown","metadata":{"id":"4vWmiBmR0ege"},"source":["## 기본 DF 생성 "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rosYzDen1l6T"},"outputs":[],"source":["import os \n","import cv2 \n","import pandas as pd \n","from glob import glob\n","from tqdm import tqdm\n","from init import init #초기 설정용 커스텀 패키지 \n","import numpy as np \n","import matplotlib.pyplot as plt \n","import matplotlib.pyplot as cm \n","import warnings\n","warnings.filterwarnings('ignore')"]},{"cell_type":"markdown","metadata":{"id":"DdMMgGvZ3iDe"},"source":["###snsb_df 생성 "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ZJy_JgMFUqUQ"},"outputs":[],"source":["columns = ['성명',\n"," '병록번호',\n"," '만나이',\n"," '검사일',\n"," '교육년수',\n"," 'SVLT_recall_total_score_z',\n"," 'SVLT_Delayed_recall_z',\n"," 'SVLT_recognition_score_z',\n"," 'RCFT_immediate_recall_z',\n"," 'RCFT_delayed_recall_z',\n"," 'RCFT_recognition_score_z',\n"," 'K_MMSE_total_score_z',\n"," 'SNSB_II_Domain_Attention_z',\n"," 'SNSB_II_Domain_Language_z',\n"," 'SNSB_II_Domain_Visuospatial_z',\n"," 'SNSB_II_Domain_Memory_z',\n"," 'SNSB_II_Domain_Frontal_z']\n","\n","snsb_df = pd.read_csv('/content/drive/MyDrive/DataSet/202202_김예림/SNSB_integerated.csv')\n","snsb_df = snsb_df.drop([2098,2591]) #병록번호 없는 행 제거 <- 결측치 \n","snsb_df['병록번호'] = snsb_df['병록번호'].apply(lambda x : str(int(x))) #소수점으로 되어 있는 것 처리하고 str형 변형 \n","\n","snsb_df = snsb_df[columns]"]},{"cell_type":"markdown","metadata":{"id":"V7h0NIEotoIc"},"source":["###dir_df 생성 "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kerrOcyYidyv"},"outputs":[],"source":["#폴더 디렉토리\n","folder_dir = glob('/content/KYR_B_imaging/*')\n","dir_df = init.dir_df(folder_dir)\n","dir_df = dir_df.sort_values(by=['key','dir'])\n","dir_df = dir_df.reset_index().drop(columns = 'index')"]},{"cell_type":"markdown","metadata":{"id":"D2-wVYErkt2_"},"source":["### 병록번호- key 값 보정\n","- 자리수 다 다른거, 중복인거 보정 \n","- 9자리로 통일 "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"IlQnCKnF06He"},"outputs":[],"source":["target_length = [4,5,6,7,8] #<- 수정해야 하는 병록번호 갯수들 \n","\n","dir_df,snsb_df = init.key_mismatch(dir_df,snsb_df,target_length)\n","#인덱스 초기화 \n","dir_df = dir_df.reset_index().drop(columns = 'index')\n","# plt.hist(snsb_df['병록번호'].map(len))\n","# plt.show()\n","\n","#에러값들 제외 \n","errors = ['000758836-1' '030338456-1' '040145556-1' '050236926-1' '090374796-1'\n"," '100402746-1' '120010356-1' '870133669-1' '920033543-1' '930236559-1'\n"," '930257597-1' '970682600-1']\n","\n","dir_df = dir_df.drop(np.where(dir_df['key'].map(len)>9)[0])"]},{"cell_type":"markdown","metadata":{"id":"8s0QWgYB5fLR"},"source":["## new_dir_df 생성 - 이미지 장수 통일 \n"]},{"cell_type":"markdown","source":["### key 값 별 이미지 장수 연산 "],"metadata":{"id":"b0iCEN_oc40h"}},{"cell_type":"code","source":["#이미지 장수 연산 \n","keys = list(set(dir_df['key'])) \n","images_length = pd.DataFrame(keys)[0].apply(lambda x: init.check_images(dir_df,x)) #키 값별로 이미지의 장수들 계산 \n","# images_length.value_counts()\n","\n","length_df = pd.DataFrame([keys,images_length]).T\n","length_df.columns = ['key','image_length']\n","length_df['image_length']  = length_df['image_length'].map(int)\n","\n","#Standard를 기준으로 less over 분할 \n","standard = 19 # 통일 시킬 이미지 장 수 기준 \n","\n","# 조정이 필요한 장 수 초과하는 것들만 추림 \n","length_df_over = length_df[length_df['image_length']>standard]\n","\n","#19장 보다 적은 경우 \n","# length_df_less = length_df[length_df['image_length']<standard]\n","\n","len(length_df_over)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tJ0qOVhtjdjK","executionInfo":{"status":"ok","timestamp":1645196976472,"user_tz":-540,"elapsed":4111,"user":{"displayName":"­임훈","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"}},"outputId":"61a2ec9f-2587-4169-a955-cddda8865068"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1606"]},"metadata":{},"execution_count":58}]},{"cell_type":"markdown","metadata":{"id":"KiMO161I-boA"},"source":["### key값 별로 이미지 19장 있는 new_dir_df 생성 "]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":7550,"status":"ok","timestamp":1645196985636,"user":{"displayName":"­임훈","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"},"user_tz":-540},"id":"W0T5XeyUeyOm","outputId":"da71438c-3164-4a62-dc04-2ce755257238"},"outputs":[{"output_type":"stream","name":"stderr","text":["100%|██████████| 1606/1606 [00:07<00:00, 212.05it/s]\n"]}],"source":["new_dir_df = pd.DataFrame(np.zeros(len(length_df_over)*19*2).reshape(-1,2))\n","new_dir_df.columns = dir_df.columns\n","\n","for index in tqdm(range(len(length_df_over))):\n","  new_dir_df.iloc[index*19:(index+1)*19,:]  = dir_df.loc[init.droped_indexes(dir_df,length_df_over,index,standard=19)]\n","new_dir_df = new_dir_df.sort_values(by=['key','dir'])\n","new_dir_df = new_dir_df.reset_index().drop(columns = 'index')"]},{"cell_type":"markdown","metadata":{"id":"fggGNd-N0YfV"},"source":["## csvs 생성 - z 스코어 임베딩 + 중복제거 \n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":388,"status":"ok","timestamp":1645238915845,"user":{"displayName":"­임훈","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"},"user_tz":-540},"id":"aqe-IPZm0hvy","colab":{"base_uri":"https://localhost:8080/"},"outputId":"78c051f3-8d96-48e4-96f5-496d68dc857c"},"outputs":[{"output_type":"stream","name":"stdout","text":["1606 1606\n"]}],"source":["#19장의 사진으로 추린 new_dir_df로 새로운 키 리스트만듬) \n","\n","key_lists = np.unique(new_dir_df['key'])\n","key_lists.sort()\n","\n","Embedding_columns = snsb_df.columns[5:]\n","\n","for column in Embedding_columns:\n","  snsb_df[f'E_{column}'] = snsb_df[column].map(init.zscore_Embedding)\n","\n","#정렬 \n","snsb_df = snsb_df.sort_values(by=['병록번호'])\n","new_dir_df = new_dir_df.sort_values(by=['key','dir'])\n","\n","#snsb_df 중 key_lists에 있는 행들만 추림 -> csvs \n","csvs = snsb_df[snsb_df['병록번호'].apply(lambda x : x in key_lists)].sort_values(by=['병록번호'])\n","csvs = csvs.reset_index().drop(columns = 'index')\n","\n","#중복 제거 : 이름으로 정렬 후 중복 제거 \n","csvs = csvs.sort_values(by=['성명'])\n","csvs = csvs.drop_duplicates(['병록번호'], keep = 'first')\n","\n","#다시 병록번호 로 정렬 해서 csvs 와 new_dir_df 순을 맞춤 \n","csvs = csvs.sort_values(['병록번호'])\n","csvs = csvs.reset_index().drop(columns = 'index')\n","new_dir_df = new_dir_df.sort_values(by=['key','dir'])\n","new_dir_df = new_dir_df.reset_index().drop(columns = 'index')\n","\n","#맞춤 확인 \n","print(len(csvs),len(np.unique(new_dir_df['key'])))"]},{"cell_type":"markdown","metadata":{"id":"W7ML5r7Z4i0U"},"source":["# 전처리"]},{"cell_type":"markdown","source":["## new_dir_df 증강 "],"metadata":{"id":"EX-1jaFPVI4F"}},{"cell_type":"code","source":["new_dir_df['dir_1'] = 0\n","new_dir_df['dir_2'] = 0 \n","new_dir_df['dir_1'].iloc[:-1] = new_dir_df['dir'].iloc[1:]\n","new_dir_df['dir_2'].iloc[:-2] = new_dir_df['dir'].iloc[2:]"],"metadata":{"id":"lNtzO8yETCF0"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["i = 0 \n","drop_indexes = [] \n","for i in range(len(key_lists)):\n","  drop_index = new_dir_df[new_dir_df['key']==key_lists[i]].iloc[17:20,].index\n","  drop_indexes.append(drop_index)\n","drop_indexes = np.array(drop_indexes).reshape(-1,)\n","new_dir_df.drop(drop_indexes,inplace=True)\n","new_dir_df = new_dir_df.reset_index().drop(columns = 'index')"],"metadata":{"id":"k6xdTC1cQNcy"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## csvs 증강 "],"metadata":{"id":"2I0_BW-5YyZh"}},{"cell_type":"code","source":["temp_csvs = np.array(csvs)\n","for i in tqdm(range(16)):\n","  temp_csvs = np.vstack([temp_csvs,np.array(csvs)])\n","temp_csvs = pd.DataFrame(temp_csvs)\n","temp_csvs.columns = csvs.columns\n","csvs = temp_csvs.sort_values(by=['병록번호']).reset_index().drop(columns = 'index')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"86aUi3ehlbSj","executionInfo":{"status":"ok","timestamp":1645196993240,"user_tz":-540,"elapsed":515,"user":{"displayName":"­임훈","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"}},"outputId":"4cc1facf-9a11-4c22-b0ee-38922f182edc"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["100%|██████████| 16/16 [00:00<00:00, 247.25it/s]\n"]}]},{"cell_type":"markdown","source":["## Augmentation "],"metadata":{"id":"FpQ6WGP4LF-I"}},{"cell_type":"code","source":["#이미지 콘트라스트 변경 \n","def img_Contrast(img): \n","  import cv2 \n","  lab = cv2.cvtColor(img, cv2.COLOR_BGR2LAB)\n","  l, a, b = cv2.split(lab)\n","  clahe = cv2.createCLAHE(clipLimit=3.0, tileGridSize=(8, 8)) \n","  cl = clahe.apply(l)\n","  limg = cv2.merge((cl, a, b))\n","  final = cv2.cvtColor(limg, cv2.COLOR_LAB2BGR)\n","  return final \n","#가우시안 블러 \n","def gaussianblur(image):\n","  import cv2 \n","  import numpy as np \n","  blur = cv2.GaussianBlur(image, (5,5), np.random.randint(0,3,1))\n","  return blur\n","\n","#랜덤 어그먼테이션 \n","def random_aug(aug_image):\n","  import numpy as np \n","  import cv2 \n","  n = np.random.randint(0,4,1)\n","  if n == 0:\n","    aug_image = cv2.flip(aug_image,np.random.randint(0,2,1))\n","  if n == 1:\n","    aug_image = img_Contrast(aug_image)\n","  if n ==2:\n","    aug_image = gaussianblur(aug_image)\n","  return aug_image\n","  if n ==3:\n","    return aug_image "],"metadata":{"id":"pbX4pUJcLJDY"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[""],"metadata":{"id":"zKC5TzWeXBKH"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ZaVmNxsN-JvR"},"source":["## 이미지 전처리"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"d-z0VSeyBA6b"},"outputs":[],"source":["def plot_img(temp_img):\n","  plt.figure(figsize=(10,10))\n","  plt.imshow(temp_img)\n","  plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"thvDsi6n-GgV"},"outputs":[],"source":["#이미지 전처리 \n","def img_preprocess(img):\n","  shape = img.shape[0]\n","  preprocessed_img = img[int(shape*0.05):int(shape*0.95),int(shape*0.1):int(shape*0.9),:] #crop \n","  preprocessed_img = cv2.cvtColor(preprocessed_img, cv2.COLOR_BGR2GRAY)\n","  preprocessed_img = cv2.resize(preprocessed_img,dsize=(224,224)) #resize Albu mentations -> vision 관련 augmentation document \n","  #scaling -> /255. \n","  preprocessed_img = efficientnet.preprocess_input(preprocessed_img) \n","  return preprocessed_img \n","\n","\n","#더미 넘파이 만든 후 거기다 224,224 grayscale 이미지 넣음\n","#디렉토리 df로 이미지 만듬 \n","def read_imgs(indexed_df):\n","    temp_img_1 = img_preprocess(cv2.imread(indexed_df['dir']))\n","    temp_img_2 = img_preprocess(cv2.imread(indexed_df['dir_1']))\n","    temp_img_3 = img_preprocess(cv2.imread(indexed_df['dir_2']))\n","    temp_imgs = np.stack([temp_img_1,temp_img_2,temp_img_3],axis=2)\n","    temp_imgs = random_aug(temp_imgs) #어그먼테이션 \n","    return temp_imgs\n","\n"]},{"cell_type":"code","source":["new_dir_df['dir'][4]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"mYJzJmEKfqfl","executionInfo":{"status":"ok","timestamp":1645198890320,"user_tz":-540,"elapsed":366,"user":{"displayName":"­임훈","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"}},"outputId":"4e780455-4038-4500-8fee-d36d073ec76e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'/content/KYR_B_imaging/swr8/0000047370005.jpg'"]},"metadata":{},"execution_count":133}]},{"cell_type":"markdown","metadata":{"id":"x4DZ7OS8nkyd"},"source":["# 데이터 제너레이터"]},{"cell_type":"markdown","metadata":{"id":"2fOR-6Hj5Cqd"},"source":["## 사전설정"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"WfdUHzsn8qQp"},"outputs":[],"source":["input_columns = ['만나이','교육년수']\n","output_columns = ['E_SVLT_recall_total_score_z', 'E_SVLT_Delayed_recall_z',\n","       'E_SVLT_recognition_score_z', 'E_RCFT_immediate_recall_z',\n","       'E_RCFT_delayed_recall_z', 'E_RCFT_recognition_score_z',\n","       'E_K_MMSE_total_score_z', 'E_SNSB_II_Domain_Attention_z',\n","       'E_SNSB_II_Domain_Language_z', 'E_SNSB_II_Domain_Visuospatial_z',\n","       'E_SNSB_II_Domain_Memory_z', 'E_SNSB_II_Domain_Frontal_z']\n","\n","csvs_max = np.array([90,18])\n","csvs_min = np.array([45,0])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"H2W_q0UKNRwm"},"outputs":[],"source":["from tensorflow.keras.preprocessing import image\n","from tensorflow.keras.utils import Sequence\n","import math\n","\n","\n","class DataGenerator(Sequence):\n","  def __init__(self,\n","                 new_dir_df,\n","                 csvs,\n","                 batch_size: int,\n","                 augmentation: bool = False,\n","                 shuffle: bool = False,\n","                 rescale:bool = True) -> None:\n","        self.input_columns = input_columns \n","        self.output_columns = output_columns\n","        self.batch_size = batch_size\n","        self.shuffle = shuffle\n","        self.augmentation = augmentation\n","        self.rescale =rescale\n","        self.new_dir_df = new_dir_df\n","        self.csvs = csvs\n","\n","  def __len__(self):\n","    return math.ceil(len(self.new_dir_df) / self.batch_size)\n","    \n","  # def _shuffle_index(self):\n","  #   if self.shuffle == True:\n","  #       np.random.shuffle(self.indexes)\n","\n","\n","  def __getitem__(self, index):\n","    # csvs_input = self.csvs[self.input_columns].iloc[index*self.batch_size:(index+1):self.batch_size,:]\n","    csvs_output = self.csvs[self.output_columns].iloc[index*self.batch_size : (index+1)*self.batch_size,:]\n","    imgs_dir_df = self.new_dir_df[index*self.batch_size : (index+1)*self.batch_size]\n","\n","    imgs = []\n","    for i in range(len(imgs_dir_df)):\n","      indexed_df = imgs_dir_df.iloc[i,:]\n","      temp_imgs = read_imgs(indexed_df)\n","      imgs.append(temp_imgs)\n","    imgs = np.array(imgs)\n","\n","    # csvs_input = np.array(csvs_input)\n","    # csvs_input = (csvs_input - csvs_min)/(csvs_max - csvs_min)\n","    csvs_output = np.array(csvs_output).astype(np.float)\n","    imgs=  np.array(imgs).astype(np.float)\n","    \n","    # return [imgs, csvs_input], csvs_output\n","    return imgs, [np.array(csvs_output[:,0]),np.array(csvs_output[:,1]),np.array(csvs_output[:,2]),np.array(csvs_output[:,3]),\n","                  np.array(csvs_output[:,4]),np.array(csvs_output[:,5]),np.array(csvs_output[:,6]),np.array(csvs_output[:,7]),\n","                  np.array(csvs_output[:,8]),np.array(csvs_output[:,9]),np.array(csvs_output[:,10]),np.array(csvs_output[:,11])]\n","train = 964*17\n","valid = 1285*17\n","# train = 900*17\n","# valid = 1200*17\n","train_generator = DataGenerator(new_dir_df[:train],csvs[:train],batch_size=64,shuffle=True)\n","valid_generator = DataGenerator(new_dir_df[train:valid],csvs[train:valid],batch_size=64,shuffle=False)\n","test_generator = DataGenerator(new_dir_df[valid:],csvs[valid:],batch_size=64)"]},{"cell_type":"markdown","source":["1. 모델 구조 \n","2. 스케일링 \n","3. 아웃풋 \n","4. 어그먼테이션 \n","5. "],"metadata":{"id":"SwYYl4mdFEO4"}},{"cell_type":"markdown","source":["train : 964*17\n","\n","valid : [964~1285]*17\n","\n","test : [1285~1606]*17 \n","\n","약 60:20:20"],"metadata":{"id":"5MlWvHz75Mma"}},{"cell_type":"markdown","metadata":{"id":"5zG5rfQ9OaJn"},"source":["#모델"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Zw4xryIZObDe"},"outputs":[],"source":["from tensorflow.keras import optimizers\n","import tensorflow as tfa \n","from tensorflow.keras import layers\n","from tensorflow.keras.layers import Bidirectional, LSTM, GRU\n","from tensorflow.keras.layers import BatchNormalization,Conv2D,MaxPooling2D,Activation,Dropout,Dense,Flatten,Input,Conv3D,MaxPooling3D\n","from tensorflow.keras.layers import Conv3D, ConvLSTM2D, BatchNormalization, Input, Dropout, Bidirectional\n","from tensorflow.keras import Model\n","from tensorflow.keras.layers import concatenate\n","from tensorflow.keras.applications import resnet50, efficientnet\n","from tensorflow.keras.applications import ResNet50, EfficientNetB0"]},{"cell_type":"code","source":["def output(x):\n","  output_2 = Dense(32,activation = 'relu')(x)\n","  output_2 = BatchNormalization()(output_2)\n","  output_2 = Dense(16,activation = 'relu')(output_2)\n","  output_2 = BatchNormalization()(output_2) \n","  output_2 = Dense(2, activation = 'softmax')(output_2)\n","  return output_2\n","\n","conv_layers = EfficientNetB0(weights='imagenet', include_top=False, input_shape=(224, 224,3)) #size -> 256, 256 \n","conv_layers.trainable = False"],"metadata":{"id":"vSNz8LLxSBPP"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"x7JIaUpJOedL"},"outputs":[],"source":["from tensorflow.python import keras\n","def make_model():\n","  image_input = Input((224,224,3))\n","\n","  x = conv_layers(image_input) \n","  #\n","  x = Flatten()(x) #con layer 끝난 뒤 아키텍처 확인 -> flatten 대신 pooling  가능? \n","  \n"," #output이 너무 많다 \n","  output_1 = output(x)\n","  output_2 = output(x)\n","  output_3 = output(x)\n","  output_4 = output(x)\n","  output_5 = output(x)\n","  output_6 = output(x)\n","  output_7 = output(x)\n","  output_8 = output(x)\n","  output_9 = output(x)\n","  output_10 = output(x)\n","  output_11 = output(x)\n","  output_12 = output(x)\n","\n","  model = Model(image_input,[output_1,output_2,output_3,output_4,output_5,output_6,output_7,output_8,output_9,output_10,output_11,output_12])\n","  model.compile(optimizer='adam',loss = 'sparse_categorical_crossentropy',metrics=['accuracy'])\n","  return model\n","model = make_model()"]},{"cell_type":"code","source":["2**12"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7mfT-O8TDoj8","executionInfo":{"status":"ok","timestamp":1645359306237,"user_tz":-540,"elapsed":8,"user":{"displayName":"­임훈","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"}},"outputId":"2caaf9f3-09e4-4ef0-b748-fc171946119d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["4096"]},"metadata":{},"execution_count":1}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"PsO6QNg-SzVE"},"outputs":[],"source":["from tensorflow.keras.utils import plot_model\n","plot_model(model)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":322},"id":"4vGjA_FdOk-N","executionInfo":{"status":"ok","timestamp":1645233817083,"user_tz":-540,"elapsed":27820383,"user":{"displayName":"­임훈","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"}},"outputId":"74504204-93a5-4445-c1c3-64c59b65b48e"},"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["loss =  2.9698166847229004 , val_loss =  4.169402122497559\n","\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r257/257 [==============================] - 277s 1s/step - loss: 2.9698 - dense_686_loss: 0.2464 - dense_689_loss: 0.1867 - dense_692_loss: 0.2552 - dense_695_loss: 0.2985 - dense_698_loss: 0.2990 - dense_701_loss: 0.2962 - dense_704_loss: 0.2115 - dense_707_loss: 0.1723 - dense_710_loss: 0.2858 - dense_713_loss: 0.3172 - dense_716_loss: 0.1714 - dense_719_loss: 0.2296 - dense_686_accuracy: 0.8972 - dense_689_accuracy: 0.9346 - dense_692_accuracy: 0.8889 - dense_695_accuracy: 0.8656 - dense_698_accuracy: 0.8754 - dense_701_accuracy: 0.8682 - dense_704_accuracy: 0.9271 - dense_707_accuracy: 0.9361 - dense_710_accuracy: 0.8761 - dense_713_accuracy: 0.8525 - dense_716_accuracy: 0.9357 - dense_719_accuracy: 0.9164 - val_loss: 4.1694 - val_dense_686_loss: 0.2932 - val_dense_689_loss: 0.3398 - val_dense_692_loss: 0.3912 - val_dense_695_loss: 0.3767 - val_dense_698_loss: 0.3895 - val_dense_701_loss: 0.4099 - val_dense_704_loss: 0.3789 - val_dense_707_loss: 0.3391 - val_dense_710_loss: 0.3597 - val_dense_713_loss: 0.3779 - val_dense_716_loss: 0.2432 - val_dense_719_loss: 0.2702 - val_dense_686_accuracy: 0.8694 - val_dense_689_accuracy: 0.8618 - val_dense_692_accuracy: 0.8229 - val_dense_695_accuracy: 0.8229 - val_dense_698_accuracy: 0.8171 - val_dense_701_accuracy: 0.8159 - val_dense_704_accuracy: 0.8318 - val_dense_707_accuracy: 0.8447 - val_dense_710_accuracy: 0.8288 - val_dense_713_accuracy: 0.8259 - val_dense_716_accuracy: 0.9018 - val_dense_719_accuracy: 0.8771\n"]}],"source":["history = model.fit(train_generator,validation_data = valid_generator, epochs=100,verbose=1,callbacks=callbacks)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"iUi69BrvPvTu"},"outputs":[],"source":["# copy from https://gist.github.com/stared/dfb4dfaf6d9a8501cd1cc8b8cb806d2e\n","# loss 실시간 출력 \n","from IPython.display import clear_output\n","from tensorflow.keras.callbacks import Callback\n","\n","class PlotLosses(Callback):\n","\n","  def on_train_begin(self, logs={}):\n","    self.epochs = []\n","    self.losses = []\n","    self.val_losses = []\n","    self.logs = []\n","    self.fig = plt.figure()\n","\n","\n","  def on_epoch_end(self, epoch, logs={}):\n","\n","    self.epochs.append(epoch)\n","    self.losses.append(logs.get('loss'))\n","    self.val_losses.append(logs.get('val_loss'))\n","\n","    clear_output(wait=True)\n","    plt.plot(self.epochs, self.losses, label=\"loss\")\n","    plt.plot(self.epochs, self.val_losses, label=\"val_loss\")\n","    plt.legend()\n","    plt.show();\n","    print(\"loss = \", self.losses[-1], \", val_loss = \", self.val_losses[-1])\n","\n","#call backs 선언\n","plot_losses = PlotLosses()\n","\n","from tensorflow.keras.callbacks import ModelCheckpoint #<- model 저장 객체, best_model.h5라는 모델 이 저장 됨 \n","model_check_point = ModelCheckpoint(\n","    'best_model.h5', \n","    monitor='val_loss', \n","    verbose=1, \n","    save_best_only=True)\n","\n","\n","from tensorflow.keras.callbacks import EarlyStopping\n","early_stopping = EarlyStopping(\n","    monitor='val_loss',  # 모니터링 대상, 이걸 기준으로 멈춤 \n","    verbose=1,\n","    patience=50)         # 중지까지의 여유분\n","\n","from tensorflow.keras.callbacks import ReduceLROnPlateau\n","reduce_lr = ReduceLROnPlateau(\n","    monitor='val_loss', # 모니터링 대상\n","    patience=5,        # 대상ㅃ 기간동안 유지\n","    factor=0.2,         # 줄이는 양                              \n","    min_learning_rate=0.00001)     # 최소 학습율\n","\n","callbacks = [ plot_losses]"]},{"cell_type":"markdown","source":["#예측 및 평가 -> voting "],"metadata":{"id":"YrKmVZ3ErIyF"}},{"cell_type":"code","source":["y_ = model.predict(test_generator)"],"metadata":{"id":"GPJ6DeFKxQh1"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["for i in range(12):\n","  exec(f'predicted_{i} = np.argmax(y_[{i}],axis=1)')"],"metadata":{"id":"lj9IUxcTxy4M"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["target_0 = np.array(csvs[output_columns][valid:])[:,0]\n"],"metadata":{"id":"abplTWCSyT37"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["temp = pd.DataFrame([predicted_0,predicted_1,predicted_2,predicted_3,predicted_4,predicted_5,predicted_6,predicted_7,predicted_8,predicted_9,predicted_10,predicted_11]).T\n","temp['index']=0"],"metadata":{"id":"mVYwKRL5yu2A"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["for i in range(321):\n","  temp['index'].iloc[i*17:(i+1)*17] = i "],"metadata":{"id":"uFLp5gKj0J2h"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["round(np.mean(temp[temp['index']==0][0]))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VKwBNeo51t_a","executionInfo":{"status":"ok","timestamp":1645238372631,"user_tz":-540,"elapsed":514,"user":{"displayName":"­임훈","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"}},"outputId":"b43d48bd-8101-403c-a263-4eaa740edaa2"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{},"execution_count":460}]},{"cell_type":"code","source":["temp[temp['index']==0]"],"metadata":{"id":"X6G9s42u2l5b"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["np.round(np.mean(np.array(temp[temp['index']==0]),axis=0))[:-1]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8Cy6sMSW2tww","executionInfo":{"status":"ok","timestamp":1645238567463,"user_tz":-540,"elapsed":383,"user":{"displayName":"­임훈","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"}},"outputId":"84a1109f-921a-4bd5-b002-0cd2c89f1411"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0., 0., 0., 1., 0., 0., 0., 1., 0., 1., 0., 0.])"]},"metadata":{},"execution_count":476}]},{"cell_type":"code","source":["predicted_y = pd.DataFrame(np.zeros(321*12).reshape(321,12))"],"metadata":{"id":"ZQgVlP_O2LRc"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["for i in range(321):\n","  predicted_y.iloc[i,:] = np.round(np.mean(np.array(temp[temp['index']==i]),axis=0))[:-1]"],"metadata":{"id":"1miX5gl-2_YR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["predicted_y"],"metadata":{"id":"3q8edMHT3I6Z"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["test_y = csvs[valid:]\n","test_y = test_y.reset_index().drop(columns = 'index')\n","test_y.drop_duplicates(['성명'],keep='first')\n","test_y = np.array(test_y[output_columns])"],"metadata":{"id":"4PqAh7Ag3haj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[""],"metadata":{"id":"-eCOzifk344h"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.metrics import precision_recall_fscore_support, classification_report,accuracy_score"],"metadata":{"id":"AN7CeZm24oNn"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(classification_report(test_y,np.array(predicted_y),target_names = ['0','1','2','3','4','5','6','7','8','9','10','11']))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HxPmZnLU6kMI","executionInfo":{"status":"ok","timestamp":1645239586384,"user_tz":-540,"elapsed":394,"user":{"displayName":"­임훈","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"}},"outputId":"2d363f4b-5503-40cc-f7b1-5585bf2a067a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","           0       0.69      0.53      0.60       174\n","           1       0.54      0.35      0.42       130\n","           2       0.59      0.22      0.32       169\n","           3       0.57      0.55      0.56       164\n","           4       0.58      0.42      0.49       154\n","           5       0.58      0.54      0.56       158\n","           6       0.63      0.17      0.26       133\n","           7       0.74      0.86      0.80       235\n","           8       0.66      0.59      0.63       190\n","           9       0.61      0.62      0.61       165\n","          10       0.67      0.06      0.12       124\n","          11       0.71      0.32      0.44       111\n","\n","   micro avg       0.64      0.47      0.54      1907\n","   macro avg       0.63      0.44      0.48      1907\n","weighted avg       0.63      0.47      0.51      1907\n"," samples avg       0.61      0.48      0.47      1907\n","\n"]}]},{"cell_type":"code","source":["score = precision_recall_fscore_support(test_y,np.array(predicted_y))\n","score = pd.DataFrame([score[0],score[1],score[2]])\n","score.index = ['precision','recall','f1score']\n","score['average']=0\n","for i in range(3):\n","  score['average'].iloc[i] = np.mean(np.array(score)[i,:])\n","score"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":143},"id":"3ih8lTgf58BG","executionInfo":{"status":"ok","timestamp":1645239442808,"user_tz":-540,"elapsed":9,"user":{"displayName":"­임훈","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"}},"outputId":"b64d1e26-338a-4106-fd85-241437ca7c71"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["\n","  <div id=\"df-9421066c-cef7-422f-86f4-dbbcb5274924\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","      <th>4</th>\n","      <th>5</th>\n","      <th>6</th>\n","      <th>7</th>\n","      <th>8</th>\n","      <th>9</th>\n","      <th>10</th>\n","      <th>11</th>\n","      <th>average</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>precision</th>\n","      <td>0.686567</td>\n","      <td>0.535714</td>\n","      <td>0.587302</td>\n","      <td>0.573248</td>\n","      <td>0.580357</td>\n","      <td>0.582192</td>\n","      <td>0.628571</td>\n","      <td>0.743590</td>\n","      <td>0.660819</td>\n","      <td>0.605882</td>\n","      <td>0.666667</td>\n","      <td>0.705882</td>\n","      <td>0.581292</td>\n","    </tr>\n","    <tr>\n","      <th>recall</th>\n","      <td>0.528736</td>\n","      <td>0.346154</td>\n","      <td>0.218935</td>\n","      <td>0.548780</td>\n","      <td>0.422078</td>\n","      <td>0.537975</td>\n","      <td>0.165414</td>\n","      <td>0.863830</td>\n","      <td>0.594737</td>\n","      <td>0.624242</td>\n","      <td>0.064516</td>\n","      <td>0.324324</td>\n","      <td>0.403055</td>\n","    </tr>\n","    <tr>\n","      <th>f1score</th>\n","      <td>0.597403</td>\n","      <td>0.420561</td>\n","      <td>0.318966</td>\n","      <td>0.560748</td>\n","      <td>0.488722</td>\n","      <td>0.559211</td>\n","      <td>0.261905</td>\n","      <td>0.799213</td>\n","      <td>0.626039</td>\n","      <td>0.614925</td>\n","      <td>0.117647</td>\n","      <td>0.444444</td>\n","      <td>0.446906</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9421066c-cef7-422f-86f4-dbbcb5274924')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-9421066c-cef7-422f-86f4-dbbcb5274924 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-9421066c-cef7-422f-86f4-dbbcb5274924');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["                  0         1         2  ...        10        11   average\n","precision  0.686567  0.535714  0.587302  ...  0.666667  0.705882  0.581292\n","recall     0.528736  0.346154  0.218935  ...  0.064516  0.324324  0.403055\n","f1score    0.597403  0.420561  0.318966  ...  0.117647  0.444444  0.446906\n","\n","[3 rows x 13 columns]"]},"metadata":{},"execution_count":555}]},{"cell_type":"code","source":["acc = accuracy_score(test_y.reshape(321*12,),np.array(predicted_y).reshape(-1,))\n","print(f'accuracy = {acc}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"x1GSGzuF7QNY","executionInfo":{"status":"ok","timestamp":1645239773357,"user_tz":-540,"elapsed":410,"user":{"displayName":"­임훈","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15355961264808837253"}},"outputId":"37b31018-2a97-40ec-f98c-4c2f2f38753e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["accuracy = 0.6061786085150571\n"]}]}],"metadata":{"accelerator":"GPU","colab":{"background_execution":"on","collapsed_sections":[],"machine_shape":"hm","name":"22.02.19_model_1","provenance":[{"file_id":"1pZwwDcy03Jj_dM6dOU7Gi59mctIiJPVo","timestamp":1645266574968},{"file_id":"18tastMh4sxkdMSRQ3ShsNVmFNnRdzc2e","timestamp":1644885200151}],"toc_visible":true,"mount_file_id":"1pZwwDcy03Jj_dM6dOU7Gi59mctIiJPVo","authorship_tag":"ABX9TyONByLdk0wqC4GlT0B2dxbp"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}